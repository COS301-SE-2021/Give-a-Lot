Index: backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.GiveaLot.givealot.Certificate.service;\r\n\r\nimport com.GiveaLot.givealot.Blockchain.Repository.BlockChainRepository;\r\nimport com.GiveaLot.givealot.Blockchain.dataclass.Blockchain;\r\nimport com.GiveaLot.givealot.Blockchain.service.BlockchainService;\r\nimport com.GiveaLot.givealot.Certificate.dataclass.Certificate;\r\nimport com.GiveaLot.givealot.Certificate.repository.CertificateRepository;\r\nimport com.GiveaLot.givealot.Notification.dataclass.Mail;\r\nimport com.GiveaLot.givealot.Notification.service.SendMailService;\r\nimport com.GiveaLot.givealot.Organisation.model.Organisations;\r\nimport com.GiveaLot.givealot.Organisation.repository.OrganisationRepository;\r\nimport com.GiveaLot.givealot.Server.ServerAccess;\r\nimport org.apache.pdfbox.Loader;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDDocumentCatalog;\r\nimport org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\r\nimport org.apache.pdfbox.pdmodel.interactive.form.PDField;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\nimport java.io.File;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\npublic class CertificateServiceImpl implements CertificateService {\r\n\r\n    private BlockchainService blockchainService;\r\n\r\n    @Autowired\r\n    private OrganisationRepository organisationRepository;\r\n\r\n    @Autowired\r\n    private CertificateRepository certificateRepository;\r\n\r\n    @Autowired\r\n    private BlockChainRepository blockChainRepository;\r\n\r\n\r\n    SendMailService service;\r\n\r\n    @Autowired\r\n    CertificateServiceImpl(SendMailService service)\r\n   {\r\n        this.service = service;\r\n   }\r\n\r\n    @Override\r\n    public boolean addCertificate(long orgId) throws Exception {\r\n\r\n        Certificate cert= certificateRepository.selectCertificateById(orgId);\r\n        Organisations organisation = organisationRepository.selectOrganisationById(orgId);\r\n\r\n       boolean certificateCreated = createPDFDocument(cert,organisation,0);\r\n\r\n        if(!certificateCreated){\r\n            throw new Exception(\"Exception: Problem creating and storing certificate\");\r\n        }\r\n\r\n        File certificate = retrieveCertificate(orgId, organisation.getOrgName());\r\n\r\n        String[] result = blockchainService\r\n                .uploadCertificate(orgId, certificate);\r\n        String certificateHash = result[0];\r\n        String txHash = result[1];\r\n        long index = blockchainService.findCertificateIndex(orgId);\r\n\r\n        Blockchain blockchain = new Blockchain(orgId,index,0,txHash,certificateHash);\r\n\r\n        blockChainRepository.save(blockchain);\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean updateCertificate(long orgId) throws Exception {\r\n\r\n        Organisations organisation = organisationRepository.selectOrganisationById(orgId);\r\n        Certificate cert = certificateRepository.selectCertificateById(orgId);\r\n        Blockchain blockchain = blockChainRepository.selectBlockchainOrgId(orgId);\r\n\r\n        boolean certificateCreated = createPDFDocument(cert,organisation,cert.getPoints());\r\n\r\n        if(!certificateCreated){\r\n            throw new Exception(\"Exception: Problem creating and storing certificate\");\r\n        }\r\n\r\n        File certificate = retrieveCertificate(orgId, organisation.getOrgName());\r\n\r\n        String[] result = blockchainService\r\n                .upgradeCertificate(0,orgId, certificate,0);\r\n\r\n        String certificateHash = result[0];\r\n        String txHash = result[1];\r\n\r\n        blockChainRepository.UpdateBlockchain(blockchain.getIndex(),blockchain.getLevel()+1,txHash,certificateHash,orgId);\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public File retrieveCertificate(long orgId, String orgName) throws Exception {\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        return access.downloadCertificate(orgId,orgName);\r\n    }\r\n\r\n    @Override\r\n    public boolean createPDFDocument(Certificate cert, Organisations organisation, int points) throws Exception {\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        access.downloadCertificateTemplate(points);\r\n\r\n        if (points!=0){\r\n            File deletion = new File(\"frontend/givealot/localFiles/\" + organisation.getOrgId() + \"certificate/CertificateComplete.pdf\");\r\n            deletion.delete();\r\n        }\r\n\r\n        String templateCertificate = \"backend/src/main/resources/TempCertificate/CertificateTemplate.pdf\";\r\n        String completeCertificate = \"frontend/givealot/localFiles/\" + organisation.getOrgId() + \"certificate/CertificateComplete.pdf\";\r\n\r\n        /** Setup the pdf file **/\r\n\r\n\r\n        File template = new File(templateCertificate);\r\n\r\n        PDDocument document = Loader.loadPDF(template);\r\n        PDDocumentCatalog catalog = document.getDocumentCatalog();\r\n\r\n        PDAcroForm acroForm = catalog.getAcroForm();\r\n\r\n        /** Assign acroform fields **/\r\n\r\n\r\n        try {\r\n\r\n            if (acroForm != null) {\r\n\r\n                PDField field = (PDField) acroForm.getField(\"name\"); // Name\r\n                field.setValue(organisation.getOrgName().toUpperCase());\r\n\r\n                field = (PDField) acroForm.getField(\"slogan\"); // Slogan\r\n                field.setValue(organisation.getSlogan());\r\n\r\n\r\n                field = (PDField) acroForm.getField(\"created\"); // Date Created\r\n                field.setValue(cert.getDateCreated());\r\n\r\n                field = (PDField) acroForm.getField(\"expiry\"); // Date Expiry\r\n                field.setValue(cert.getDateExpiry());\r\n\r\n                acroForm.flatten();\r\n\r\n            }\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: unable to create certificate\");\r\n        }\r\n\r\n        document.save(completeCertificate);\r\n        document.close();\r\n\r\n        access.uploadCertificate(organisation.getOrgId(), organisation.getOrgName());\r\n\r\n        File deletion1 = new File(templateCertificate);\r\n\r\n        deletion1.delete();\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean checkRenewal() throws Exception {\r\n        List<Certificate> certificateList = certificateRepository.findAll();\r\n\r\n        Date dateCurrent = new Date();\r\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n\r\n        List<Long> id = new ArrayList<>();\r\n        List<Date> expiry = new ArrayList<>();;\r\n\r\n        for (int i = 0; i < certificateList.size(); i++) {\r\n            id.add(certificateList.get(i).getOrgId());\r\n            expiry.add(format.parse(certificateList.get(i).getDateExpiry()));\r\n        }\r\n\r\n        for (int i = 0; i < id.size(); i++) {\r\n            if(expiry.get(i)==null)\r\n                throw new NullPointerException();\r\n\r\n            Date sqlDate = expiry.get(i);\r\n\r\n            boolean check = dateCurrent.after(sqlDate);\r\n            if (check) {\r\n                certificateRepository.updateOrgRenewal(id.get(i),false);\r\n                certificateRepository.updateAdminRenewal(id.get(i),false);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean CertificateExpiredEmail(String orgName, String orgEmail) throws Exception {\r\n        Mail mail = new Mail();\r\n\r\n        mail.setRecipient(orgEmail);\r\n        mail.setSubject(\"Givealot Certificate Expiried\");\r\n        mail.setMessage(\"Good day we hope this email finds you well,\\n We regret to inform you that your certificate has expired please log in to your portal to renew it\" +\r\n                \"\\n Kind Regards\\n\" +\r\n                \"Givalot Team\");\r\n\r\n        service.sendMail(mail);\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean organisationRenewal(long orgId) throws Exception {\r\n        certificateRepository.updateOrgRenewal(orgId,true);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean adminRenewal(long orgId) throws Exception {\r\n        certificateRepository.updateAdminRenewal(orgId,true);\r\n        return true;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java b/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java
--- a/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java	(revision 7a9d34144559a7a2e7c79596eafd43d63b7afddf)
+++ b/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java	(date 1629118710680)
@@ -122,7 +122,6 @@
 
         /** Setup the pdf file **/
 
-
         File template = new File(templateCertificate);
 
         PDDocument document = Loader.loadPDF(template);
Index: backend/src/main/java/com/GiveaLot/givealot/Server/ServerAccess.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage com.GiveaLot.givealot.Server;\r\n\r\nimport com.GiveaLot.givealot.Organisation.repository.OrganisationInfoRepository;\r\nimport com.jcraft.jsch.ChannelSftp;\r\nimport com.jcraft.jsch.JSch;\r\nimport com.jcraft.jsch.JSchException;\r\nimport com.jcraft.jsch.Session;\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.apache.pdfbox.Loader;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDDocumentCatalog;\r\nimport org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\r\nimport org.apache.pdfbox.pdmodel.interactive.form.PDField;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\nimport java.io.File;\r\nimport java.io.InputStream;\r\n\r\npublic class ServerAccess {\r\n\r\n    @Autowired\r\n    private OrganisationInfoRepository organisationInfoRepository;\r\n\r\n    private String remoteHost = \"209.97.142.151\";\r\n    private String username = \"ubuntu\";\r\n    private String password = \"COS301-DsP\";\r\n\r\n    private String remoteDir = \"/home/ubuntu/\";\r\n\r\n    private Session session;\r\n\r\n    private ChannelSftp setupJsch() throws JSchException {\r\n        JSch jsch = new JSch();\r\n        //jsch.setKnownHosts(\"C:/Users/joshu/.ssh/known_hosts\");\r\n        jsch.setKnownHosts(\"backend/src/main/java/com/GiveaLot/givealot/Server/known_hosts\");\r\n        session = jsch.getSession(username, remoteHost);\r\n        java.util.Properties config = new java.util.Properties();\r\n        config.put(\"StrictHostKeyChecking\", \"no\");\r\n        session.setConfig(config);\r\n        session.setPassword(password);\r\n        session.connect();\r\n        return (ChannelSftp) session.openChannel(\"sftp\");\r\n    }\r\n\r\n    public void createOrganisationDirectory(long orgId, String orgName) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String orgNameSpace = orgName.replaceAll(\"\\\\s+\", \"\");\r\n\r\n            channelSftp.mkdir(remoteDir + \"Organisations/\" + orgIdString);\r\n            channelSftp.mkdir(remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Reports\");\r\n            channelSftp.mkdir(remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Documents\");\r\n            channelSftp.mkdir(remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Gallery\");\r\n            channelSftp.mkdir(remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Certificates\");\r\n            channelSftp.put( remoteDir + \"Organisations/\" + orgIdString + \"/\" + orgNameSpace);\r\n\r\n            String localStorage = \"frontend/givealot/localFiles/\" + orgIdString;\r\n            String localImageStorage = \"frontend/givealot/localFiles/\" + orgIdString + \"/gallery\";\r\n            String localCertificateStorage = \"frontend/givealot/localFiles/\" + orgIdString + \"/certificate\";\r\n\r\n            File directoryLocal = new File(localStorage);\r\n            File directoryImageLocal = new File(localImageStorage);\r\n            File directoryCertLocal = new File(localCertificateStorage);\r\n\r\n            directoryLocal.mkdir();\r\n            directoryImageLocal.mkdir();\r\n            directoryCertLocal.mkdir();\r\n\r\n\r\n            if (directoryLocal.mkdir()){\r\n                throw new Exception(\"Exception: local directory could not be created\");\r\n            }\r\n            if (directoryImageLocal.mkdir()){\r\n                throw new Exception(\"Exception: image directory could not be created\");\r\n            }\r\n            if (directoryCertLocal.mkdir()){\r\n                throw new Exception(\"Exception: certificate directory could not be created\");\r\n            }\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to interact with the server: \" + e);\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void uploadCertificate(long orgId, String orgName) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n            String localFile = \"frontend/givealot/localFiles/\" + orgIdString + \"certificate/CertificateComplete.pdf\";\r\n\r\n            channelSftp.put(localFile, remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Certificates\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"Certificate.pdf\");\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to interact with the server\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void downloadCertificateTemplate(int points) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            channelSftp.connect();\r\n\r\n\r\n            String templateLocation;\r\n\r\n            if (points < 20) {\r\n                templateLocation = remoteDir + \"Templates/cert0Template.pdf\";\r\n\r\n            } else if (points >= 20 && points < 40) {\r\n                templateLocation = remoteDir + \"Templates/cert1Template.pdf\";\r\n\r\n            } else if (points >= 40 && points < 60) {\r\n                templateLocation = remoteDir + \"Templates/cert2Template.pdf\";\r\n\r\n            } else if (points >= 60 && points < 80) {\r\n                templateLocation = remoteDir + \"Templates/cert3Template.pdf\";\r\n\r\n            } else if (points >= 80 && points < 100) {\r\n                templateLocation = remoteDir + \"Templates/cert4Template.pdf\";\r\n\r\n            } else if (points == 100) {\r\n                templateLocation = remoteDir + \"Templates/cert5Template.pdf\";\r\n\r\n            } else {\r\n                throw new Exception(\"Exception: Invalid certificate level\");\r\n            }\r\n\r\n            File fileLocation = new File(\"backend/src/main/resources/TempCertificate/CertificateTemplate.pdf\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate template\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n\r\n    }\r\n\r\n    public File downloadCertificate(long orgId, String orgName) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String templateLocation;\r\n\r\n            templateLocation = remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Certificates\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"Certificate.pdf\";\r\n\r\n            File fileLocation = new File(orgName.replaceAll(\"\\\\s+\", \"\") + \"Certificate.pdf\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n            return fileLocation;\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void uploadAuditDocument(long orgId, String orgName, File document) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            document.renameTo(new File(\"backend/src/main/resources/TempDocument/audit.pdf\"));\r\n\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n            String localFile = \"backend/src/main/resources/TempDocument/audit.pdf\";\r\n\r\n            channelSftp.put(localFile, remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Documents\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"AuditDocument.pdf\");\r\n\r\n            File deletion = new File(localFile);\r\n            deletion.delete();\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to interact with the server\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public File downloadAuditDoc(long orgId, String orgName) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String templateLocation;\r\n\r\n            templateLocation = remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Documents\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"AuditDocument.pdf\";\r\n\r\n            File fileLocation = new File(orgName.replaceAll(\"\\\\s+\", \"\") + \"AuditDocument.pdf\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n            return fileLocation;\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void uploadTaxReference(long orgId, String orgName, File document) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            document.renameTo(new File(\"backend/src/main/resources/TempDocument/taxRef.pdf\"));\r\n\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n            String localFile = \"backend/src/main/resources/TempDocument/taxRef.pdf\";\r\n\r\n            channelSftp.put(localFile, remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Documents\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"TaxReference.pdf\");\r\n\r\n            File deletion = new File(localFile);\r\n            deletion.delete();\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to interact with the server\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public File downloadTaxRef(long orgId, String orgName) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String templateLocation;\r\n\r\n            templateLocation = remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Documents\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"TaxReference.pdf\";\r\n\r\n            File fileLocation = new File(orgName.replaceAll(\"\\\\s+\", \"\") + \"TaxReference.pdf\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n            return fileLocation;\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void uploadImageJPG(long orgId, String orgName, File image) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            image.renameTo(new File(\"backend/src/main/resources/TempDocument/image.jpg\"));\r\n\r\n            channelSftp.connect();\r\n\r\n            //Query to certificate for number of images\r\n\r\n            int imageNumber = organisationInfoRepository.selectOrganisationInfo(orgId).getNumberOfImages() + 1;\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n            String localFile = \"frontend/givealot/localFiles/\" + orgId + \"/gallery/image\" + imageNumber + \".jpg\";\r\n\r\n            FileUtils.copyFile(image, new File(localFile));\r\n\r\n            channelSftp.put(localFile, remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Gallery/image\" + imageNumber + \".jpg\");\r\n\r\n            image.delete();\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to interact with the server: \" + e);\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public File downloadImageJPG(long orgId, int index) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String templateLocation;\r\n\r\n            templateLocation = remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Gallery/image\" + index + \".jpg\";\r\n\r\n            File fileLocation = new File(\"image\" + index + \".jpg\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n            return fileLocation;\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void uploadImagePNG(long orgId, String orgName, File image) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            image.renameTo(new File(\"backend/src/main/resources/TempDocument/image.png\"));\r\n\r\n            channelSftp.connect();\r\n\r\n            //Query to certificate for number of images\r\n\r\n            int imageNumber = organisationInfoRepository.selectOrganisationInfo(orgId).getNumberOfImages() + 1;\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n            String localFile = \"frontend/givealot/localFiles/\" + orgId + \"gallery/image\" + imageNumber + \".png\";\r\n\r\n            FileUtils.copyFile(image, new File(localFile));\r\n\r\n            channelSftp.put(localFile, remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Gallery/image\" + imageNumber + \".png\");\r\n\r\n//            File deletion = new File(localFile);\r\n//            deletion.delete();\r\n            image.delete();\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public File downloadImagePNG(long orgId, int index) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String templateLocation;\r\n\r\n            templateLocation = remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Gallery/image\" + index + \".png\";\r\n\r\n            File fileLocation = new File(\"image\" + index + \".png\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n            return fileLocation;\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        File file = new File(\"C:/test.jpg\");\r\n\r\n        access.createOrganisationDirectory(1,\"The Local Guys\");\r\n\r\n        //File doc = access.downloadCertificate(45,\"New Org\");\r\n\r\n        //access.uploadTaxReference(45,\"New Org\",doc);\r\n\r\n//        File image = access.downloadImagePNG(45,0);\r\n//\r\n        access.uploadImageJPG(1,\"New Org\", file);\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Server/ServerAccess.java b/backend/src/main/java/com/GiveaLot/givealot/Server/ServerAccess.java
--- a/backend/src/main/java/com/GiveaLot/givealot/Server/ServerAccess.java	(revision 3efd88b9f061ef4bb1650caa52928d13f0bcfcb8)
+++ b/backend/src/main/java/com/GiveaLot/givealot/Server/ServerAccess.java	(date 1629119550160)
@@ -22,9 +22,9 @@
     @Autowired
     private OrganisationInfoRepository organisationInfoRepository;
 
-    private String remoteHost = "209.97.142.151";
-    private String username = "ubuntu";
-    private String password = "COS301-DsP";
+    private String remoteHost = "";
+    private String username = "";
+    private String password = "";
 
     private String remoteDir = "/home/ubuntu/";
 
