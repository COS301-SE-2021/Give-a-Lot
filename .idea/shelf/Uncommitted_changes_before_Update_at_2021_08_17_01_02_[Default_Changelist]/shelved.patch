Index: backend/src/main/java/com/GiveaLot/givealot/Organisation/repository/OrganisationRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.GiveaLot.givealot.Organisation.repository;\r\n\r\nimport com.GiveaLot.givealot.Organisation.model.Organisations;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Modifying;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.stereotype.Repository;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\n/*\r\n* Todo:\r\n*  1) Register organisation - done\r\n*  2) Select AddOrganisationRequest - done\r\n*  3) suspend AddOrganisationRequest - done\r\n*  4) activate AddOrganisationRequest - done\r\n*  5) investigate AddOrganisationRequest - done\r\n*/\r\n\r\n@Repository\r\npublic interface OrganisationRepository extends JpaRepository<Organisations,Long>\r\n{\r\n    @Query(\"select o from Organisations o where o.orgId = ?1\")\r\n    Organisations selectOrganisationById(Long orgId);\r\n\r\n    @Query(\"select o from Organisations o where o.orgEmail = ?1\")\r\n    Organisations selectOrganisationByEmail(String orgEmail);\r\n\r\n    @Modifying\r\n    @Transactional\r\n    @Query(\"UPDATE Organisations o SET o.status = ?2 WHERE o.orgId = ?1\")\r\n    Integer updateStatus(Long orgId, String status);\r\n\r\n    @Modifying\r\n    @Transactional\r\n    @Query(\"UPDATE Organisations o SET o.directory = ?2 WHERE o.orgId = ?1\")\r\n    Integer updateRepo(Long orgId, String dir);\r\n\r\n    @Query(\"SELECT DISTINCT o.orgId FROM Organisations AS o WHERE o.orgEmail = ?1\")\r\n    long getOrgId(String orgEmail);\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Organisation/repository/OrganisationRepository.java b/backend/src/main/java/com/GiveaLot/givealot/Organisation/repository/OrganisationRepository.java
--- a/backend/src/main/java/com/GiveaLot/givealot/Organisation/repository/OrganisationRepository.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/src/main/java/com/GiveaLot/givealot/Organisation/repository/OrganisationRepository.java	(date 1629153962015)
@@ -7,14 +7,6 @@
 import org.springframework.stereotype.Repository;
 import org.springframework.transaction.annotation.Transactional;
 
-/*
-* Todo:
-*  1) Register organisation - done
-*  2) Select AddOrganisationRequest - done
-*  3) suspend AddOrganisationRequest - done
-*  4) activate AddOrganisationRequest - done
-*  5) investigate AddOrganisationRequest - done
-*/
 
 @Repository
 public interface OrganisationRepository extends JpaRepository<Organisations,Long>
Index: backend/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\t\t xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>2.5.0</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.Give-a-Lot</groupId>\r\n\t<artifactId>givealot</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>givealot</name>\r\n\t<description>Givealot backend</description>\r\n\t<properties>\r\n\t\t<java.version>11</java.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.commons</groupId>\r\n\t\t\t<artifactId>commons-lang3</artifactId>\r\n\t\t\t<version>3.12.0</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-mail</artifactId>\r\n\t\t\t<version>2.4.4</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-devtools</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework</groupId>\r\n\t\t\t<artifactId>spring-context-support</artifactId>\r\n\t\t\t<version>5.3.9</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt</artifactId>\r\n\t\t\t<version>0.9.1</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.data</groupId>\r\n\t\t\t<artifactId>spring-data-jpa</artifactId>\r\n\t\t\t<version>2.5.3</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.itextpdf</groupId>\r\n\t\t\t<artifactId>itextpdf</artifactId>\r\n\t\t\t<version>5.5.13.2</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.google.code.gson</groupId>\r\n\t\t\t<artifactId>gson</artifactId>\r\n\t\t\t<version>2.8.7</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-mail</artifactId>\r\n\t\t\t<version>2.4.4</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.integration</groupId>\r\n\t\t\t<artifactId>spring-integration-sftp</artifactId>\r\n\t\t\t<version>5.5.2</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.tomcat</groupId>\r\n\t\t\t<artifactId>tomcat-util</artifactId>\r\n\t\t\t<version>7.0.22</version>\r\n\t\t</dependency>\r\n\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.jcraft</groupId>\r\n\t\t\t<artifactId>jsch</artifactId>\r\n\t\t\t<version>0.1.55</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework</groupId>\r\n\t\t\t<artifactId>spring-messaging</artifactId>\r\n\t\t\t<version>5.3.9</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.integration</groupId>\r\n\t\t\t<artifactId>spring-integration-core</artifactId>\r\n\t\t\t<version>5.5.2</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.postgresql</groupId>\r\n\t\t\t<artifactId>postgresql</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.zaxxer</groupId>\r\n\t\t\t<artifactId>HikariCP</artifactId>\r\n\t\t\t<version>4.0.3</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-jdbc</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-jdbc</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.hierynomus</groupId>\r\n\t\t\t<artifactId>sshj</artifactId>\r\n\t\t\t<version>0.27.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>junit</groupId>\r\n\t\t\t<artifactId>junit</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-jdbc</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.pdfbox</groupId>\r\n\t\t\t<artifactId>pdfbox</artifactId>\r\n\t\t\t<version>2.0.1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.pdfbox</groupId>\r\n\t\t\t<artifactId>fontbox</artifactId>\r\n\t\t\t<version>2.0.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.pdfbox</groupId>\r\n\t\t\t<artifactId>jempbox</artifactId>\r\n\t\t\t<version>1.8.11</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.pdfbox</groupId>\r\n\t\t\t<artifactId>xmpbox</artifactId>\r\n\t\t\t<version>2.0.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.pdfbox</groupId>\r\n\t\t\t<artifactId>pdfbox-tools</artifactId>\r\n\t\t\t<version>3.0.0-RC1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.pdfbox</groupId>\r\n\t\t\t<artifactId>pdfbox-app</artifactId>\r\n\t\t\t<version>3.0.0-RC1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.pdfbox</groupId>\r\n\t\t\t<artifactId>pdfbox-debugger</artifactId>\r\n\t\t\t<version>3.0.0-RC1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.pdfbox</groupId>\r\n\t\t\t<artifactId>pdfbox</artifactId>\r\n\t\t\t<version>3.0.0-RC1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.pdfbox</groupId>\r\n\t\t\t<artifactId>preflight</artifactId>\r\n\t\t\t<version>2.0.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.apache.pdfbox</groupId>\r\n\t\t\t<artifactId>pdfbox-tools</artifactId>\r\n\t\t\t<version>2.0.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.web3j</groupId>\r\n\t\t\t<artifactId>core</artifactId>\r\n\t\t\t<version>4.8.7</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.web3j</groupId>\r\n\t\t\t<artifactId>crypto</artifactId>\r\n\t\t\t<version>4.8.7</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.web3j</groupId>\r\n\t\t\t<artifactId>rlp</artifactId>\r\n\t\t\t<version>4.8.7</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.web3j</groupId>\r\n\t\t\t<artifactId>tuples</artifactId>\r\n\t\t\t<version>4.8.7</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.web3j</groupId>\r\n\t\t\t<artifactId>utils</artifactId>\r\n\t\t\t<version>4.8.7</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.web3j</groupId>\r\n\t\t\t<artifactId>abi</artifactId>\r\n\t\t\t<version>4.8.7</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.web3j</groupId>\r\n\t\t\t<artifactId>codegen</artifactId>\r\n\t\t\t<version>4.8.7</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.squareup.okhttp3</groupId>\r\n\t\t\t<artifactId>okhttp</artifactId>\r\n\t\t\t<version>4.3.1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.squareup.okhttp3</groupId>\r\n\t\t\t<artifactId>logging-interceptor</artifactId>\r\n\t\t\t<version>4.3.1</version>\r\n\t\t</dependency>\r\n\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\r\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<source>9</source>\r\n\t\t\t\t\t<target>9</target>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/pom.xml b/backend/pom.xml
--- a/backend/pom.xml	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/pom.xml	(date 1629150007212)
@@ -267,6 +267,11 @@
 			<artifactId>logging-interceptor</artifactId>
 			<version>4.3.1</version>
 		</dependency>
+		<dependency>
+			<groupId>org.mockito</groupId>
+			<artifactId>mockito-core</artifactId>
+			<version>2.21.0</version>
+		</dependency>
 
 	</dependencies>
 
Index: backend/src/main/java/com/GiveaLot/givealot/Server/ServerAccess.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage com.GiveaLot.givealot.Server;\r\n\r\nimport com.GiveaLot.givealot.Organisation.repository.OrganisationInfoRepository;\r\nimport com.jcraft.jsch.ChannelSftp;\r\nimport com.jcraft.jsch.JSch;\r\nimport com.jcraft.jsch.JSchException;\r\nimport com.jcraft.jsch.Session;\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.apache.pdfbox.Loader;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDDocumentCatalog;\r\nimport org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\r\nimport org.apache.pdfbox.pdmodel.interactive.form.PDField;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\nimport java.io.File;\r\nimport java.io.InputStream;\r\n\r\npublic class ServerAccess {\r\n\r\n    @Autowired\r\n    private OrganisationInfoRepository organisationInfoRepository;\r\n\r\n    private String remoteHost = \"\";\r\n    private String username = \"\";\r\n    private String password = \"\";\r\n\r\n    private String remoteDir = \"/home/ubuntu/\";\r\n\r\n    private Session session;\r\n\r\n    private ChannelSftp setupJsch() throws JSchException {\r\n        JSch jsch = new JSch();\r\n        //jsch.setKnownHosts(\"C:/Users/joshu/.ssh/known_hosts\");\r\n        jsch.setKnownHosts(\"backend/src/main/java/com/GiveaLot/givealot/Server/known_hosts\");\r\n        session = jsch.getSession(username, remoteHost);\r\n        java.util.Properties config = new java.util.Properties();\r\n        config.put(\"StrictHostKeyChecking\", \"no\");\r\n        session.setConfig(config);\r\n        session.setPassword(password);\r\n        session.connect();\r\n        return (ChannelSftp) session.openChannel(\"sftp\");\r\n    }\r\n\r\n    public void createOrganisationDirectory(long orgId, String orgName) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String orgNameSpace = orgName.replaceAll(\"\\\\s+\", \"\");\r\n\r\n            channelSftp.mkdir(remoteDir + \"Organisations/\" + orgIdString);\r\n            channelSftp.mkdir(remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Reports\");\r\n            channelSftp.mkdir(remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Documents\");\r\n            channelSftp.mkdir(remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Gallery\");\r\n            channelSftp.mkdir(remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Certificates\");\r\n            channelSftp.put( remoteDir + \"Organisations/\" + orgIdString + \"/\" + orgNameSpace);\r\n\r\n            String localStorage = \"frontend/givealot/localFiles/\" + orgIdString;\r\n            String localImageStorage = \"frontend/givealot/localFiles/\" + orgIdString + \"/gallery\";\r\n            String localCertificateStorage = \"frontend/givealot/localFiles/\" + orgIdString + \"/certificate\";\r\n\r\n            File directoryLocal = new File(localStorage);\r\n            File directoryImageLocal = new File(localImageStorage);\r\n            File directoryCertLocal = new File(localCertificateStorage);\r\n\r\n            directoryLocal.mkdir();\r\n            directoryImageLocal.mkdir();\r\n            directoryCertLocal.mkdir();\r\n\r\n\r\n            if (directoryLocal.mkdir()){\r\n                throw new Exception(\"Exception: local directory could not be created\");\r\n            }\r\n            if (directoryImageLocal.mkdir()){\r\n                throw new Exception(\"Exception: image directory could not be created\");\r\n            }\r\n            if (directoryCertLocal.mkdir()){\r\n                throw new Exception(\"Exception: certificate directory could not be created\");\r\n            }\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to interact with the server: \" + e);\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void uploadCertificate(long orgId, String orgName) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n            String localFile = \"frontend/givealot/localFiles/\" + orgIdString + \"certificate/CertificateComplete.pdf\";\r\n\r\n            channelSftp.put(localFile, remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Certificates\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"Certificate.pdf\");\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to interact with the server\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void downloadCertificateTemplate(int points) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            channelSftp.connect();\r\n\r\n\r\n            String templateLocation;\r\n\r\n            if (points < 20) {\r\n                templateLocation = remoteDir + \"Templates/cert0Template.pdf\";\r\n\r\n            } else if (points >= 20 && points < 40) {\r\n                templateLocation = remoteDir + \"Templates/cert1Template.pdf\";\r\n\r\n            } else if (points >= 40 && points < 60) {\r\n                templateLocation = remoteDir + \"Templates/cert2Template.pdf\";\r\n\r\n            } else if (points >= 60 && points < 80) {\r\n                templateLocation = remoteDir + \"Templates/cert3Template.pdf\";\r\n\r\n            } else if (points >= 80 && points < 100) {\r\n                templateLocation = remoteDir + \"Templates/cert4Template.pdf\";\r\n\r\n            } else if (points == 100) {\r\n                templateLocation = remoteDir + \"Templates/cert5Template.pdf\";\r\n\r\n            } else {\r\n                throw new Exception(\"Exception: Invalid certificate level\");\r\n            }\r\n\r\n            File fileLocation = new File(\"backend/src/main/resources/TempCertificate/CertificateTemplate.pdf\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate template\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n\r\n    }\r\n\r\n    public File downloadCertificate(long orgId, String orgName) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String templateLocation;\r\n\r\n            templateLocation = remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Certificates\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"Certificate.pdf\";\r\n\r\n            File fileLocation = new File(orgName.replaceAll(\"\\\\s+\", \"\") + \"Certificate.pdf\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n            return fileLocation;\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void uploadAuditDocument(long orgId, String orgName, File document) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            document.renameTo(new File(\"backend/src/main/resources/TempDocument/audit.pdf\"));\r\n\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n            String localFile = \"backend/src/main/resources/TempDocument/audit.pdf\";\r\n\r\n            channelSftp.put(localFile, remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Documents\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"AuditDocument.pdf\");\r\n\r\n            File deletion = new File(localFile);\r\n            deletion.delete();\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to interact with the server\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public File downloadAuditDoc(long orgId, String orgName) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String templateLocation;\r\n\r\n            templateLocation = remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Documents\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"AuditDocument.pdf\";\r\n\r\n            File fileLocation = new File(orgName.replaceAll(\"\\\\s+\", \"\") + \"AuditDocument.pdf\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n            return fileLocation;\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void uploadTaxReference(long orgId, String orgName, File document) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            document.renameTo(new File(\"backend/src/main/resources/TempDocument/taxRef.pdf\"));\r\n\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n            String localFile = \"backend/src/main/resources/TempDocument/taxRef.pdf\";\r\n\r\n            channelSftp.put(localFile, remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Documents\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"TaxReference.pdf\");\r\n\r\n            File deletion = new File(localFile);\r\n            deletion.delete();\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to interact with the server\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public File downloadTaxRef(long orgId, String orgName) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String templateLocation;\r\n\r\n            templateLocation = remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Documents\" + \"/\" + orgName.replaceAll(\"\\\\s+\", \"\") + \"TaxReference.pdf\";\r\n\r\n            File fileLocation = new File(orgName.replaceAll(\"\\\\s+\", \"\") + \"TaxReference.pdf\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n            return fileLocation;\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void uploadImageJPG(long orgId, String orgName, File image) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            image.renameTo(new File(\"backend/src/main/resources/TempDocument/image.jpg\"));\r\n\r\n            channelSftp.connect();\r\n\r\n            //Query to certificate for number of images\r\n\r\n            int imageNumber = organisationInfoRepository.selectOrganisationInfo(orgId).getNumberOfImages() + 1;\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n            String localFile = \"frontend/givealot/localFiles/\" + orgId + \"/gallery/image\" + imageNumber + \".jpg\";\r\n\r\n            FileUtils.copyFile(image, new File(localFile));\r\n\r\n            channelSftp.put(localFile, remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Gallery/image\" + imageNumber + \".jpg\");\r\n\r\n            image.delete();\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to interact with the server: \" + e);\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public File downloadImageJPG(long orgId, int index) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String templateLocation;\r\n\r\n            templateLocation = remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Gallery/image\" + index + \".jpg\";\r\n\r\n            File fileLocation = new File(\"image\" + index + \".jpg\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n            return fileLocation;\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void uploadImagePNG(long orgId, String orgName, File image) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n\r\n            image.renameTo(new File(\"backend/src/main/resources/TempDocument/image.png\"));\r\n\r\n            channelSftp.connect();\r\n\r\n            //Query to certificate for number of images\r\n\r\n            int imageNumber = organisationInfoRepository.selectOrganisationInfo(orgId).getNumberOfImages() + 1;\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n            String localFile = \"frontend/givealot/localFiles/\" + orgId + \"gallery/image\" + imageNumber + \".png\";\r\n\r\n            FileUtils.copyFile(image, new File(localFile));\r\n\r\n            channelSftp.put(localFile, remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Gallery/image\" + imageNumber + \".png\");\r\n\r\n\r\n            image.delete();\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public void uploadReport(long orgId, File report, String date) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n            System.out.println(\"test\");\r\n            report.renameTo(new File(\"backend/src/main/resources/TempDocument/report.txt\"));\r\n\r\n            channelSftp.connect();\r\n\r\n\r\n            int reportNumber =organisationInfoRepository.selectOrganisationInfo(orgId).getNumberOfReports();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String localFile = \"frontend/givealot/localFiles/\" + orgId + \"/reports/report\" + reportNumber + \".txt\";\r\n\r\n            FileUtils.copyFile(report, new File(localFile));\r\n\r\n            System.out.println(\"test\");\r\n            channelSftp.put(localFile, remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Reports/report\" + reportNumber + \"-\" + date +\".txt\");\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        finally {\r\n            report.delete();\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public File downloadImagePNG(long orgId, int index) throws Exception {\r\n        ChannelSftp channelSftp = setupJsch();\r\n        try {\r\n            channelSftp.connect();\r\n\r\n            String orgIdString = String.valueOf(orgId);\r\n\r\n            String templateLocation;\r\n\r\n            templateLocation = remoteDir + \"Organisations/\" + orgIdString + \"/\" + \"Gallery/image\" + index + \".png\";\r\n\r\n            File fileLocation = new File(\"image\" + index + \".png\");\r\n            InputStream stream = channelSftp.get(templateLocation);\r\n            FileUtils.copyInputStreamToFile(stream, fileLocation);\r\n\r\n            return fileLocation;\r\n\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: Failed to download certificate\");\r\n        }\r\n        finally {\r\n            channelSftp.exit();\r\n            session.disconnect();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        File file = new File(\"C:/test.jpg\");\r\n\r\n        access.createOrganisationDirectory(1,\"The Local Guys\");\r\n\r\n        //File doc = access.downloadCertificate(45,\"New Org\");\r\n\r\n        //access.uploadTaxReference(45,\"New Org\",doc);\r\n\r\n//        File image = access.downloadImagePNG(45,0);\r\n//\r\n        access.uploadImageJPG(1,\"New Org\", file);\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Server/ServerAccess.java b/backend/src/main/java/com/GiveaLot/givealot/Server/ServerAccess.java
--- a/backend/src/main/java/com/GiveaLot/givealot/Server/ServerAccess.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/src/main/java/com/GiveaLot/givealot/Server/ServerAccess.java	(date 1629153750864)
@@ -22,31 +22,41 @@
     @Autowired
     private OrganisationInfoRepository organisationInfoRepository;
 
-    private String remoteHost = "";
-    private String username = "";
-    private String password = "";
+    private String remoteHost = "209.97.142.151";
+    private String username = "ubuntu";
+    private String password = "COS301-DsP";
 
     private String remoteDir = "/home/ubuntu/";
 
     private Session session;
 
-    private ChannelSftp setupJsch() throws JSchException {
-        JSch jsch = new JSch();
-        //jsch.setKnownHosts("C:/Users/joshu/.ssh/known_hosts");
-        jsch.setKnownHosts("backend/src/main/java/com/GiveaLot/givealot/Server/known_hosts");
-        session = jsch.getSession(username, remoteHost);
-        java.util.Properties config = new java.util.Properties();
-        config.put("StrictHostKeyChecking", "no");
-        session.setConfig(config);
-        session.setPassword(password);
-        session.connect();
-        return (ChannelSftp) session.openChannel("sftp");
+    private final JSch jsch ;
+
+
+    public ServerAccess(JSch jSch) {
+        this.jsch = jSch;
+    }
+
+    private ChannelSftp setupJsch() {
+        try {
+            //jsch.setKnownHosts("C:/Users/joshu/.ssh/known_hosts");
+            jsch.setKnownHosts("backend/src/main/java/com/GiveaLot/givealot/Server/known_hosts");
+            session = jsch.getSession(username, remoteHost);
+            java.util.Properties config = new java.util.Properties();
+            config.put("StrictHostKeyChecking", "no");
+            session.setConfig(config);
+            session.setPassword(password);
+            session.connect();
+            return (ChannelSftp) session.openChannel("sftp");
+        } catch (JSchException e) {
+            e.printStackTrace();
+            return null;
+        }
     }
 
-    public void createOrganisationDirectory(long orgId, String orgName) throws Exception {
+    public boolean createOrganisationDirectory(long orgId, String orgName) throws Exception {
         ChannelSftp channelSftp = setupJsch();
         try {
-
             channelSftp.connect();
 
             String orgIdString = String.valueOf(orgId);
@@ -84,12 +94,13 @@
             }
 
         }catch (Exception e){
-            throw new Exception("Exception: Failed to interact with the server: " + e);
+            e.printStackTrace();
         }
         finally {
             channelSftp.exit();
             session.disconnect();
         }
+        return  true;
     }
 
     public void uploadCertificate(long orgId, String orgName) throws Exception {
@@ -372,7 +383,6 @@
     public void uploadReport(long orgId, File report, String date) throws Exception {
         ChannelSftp channelSftp = setupJsch();
         try {
-            System.out.println("test");
             report.renameTo(new File("backend/src/main/resources/TempDocument/report.txt"));
 
             channelSftp.connect();
@@ -386,7 +396,6 @@
 
             FileUtils.copyFile(report, new File(localFile));
 
-            System.out.println("test");
             channelSftp.put(localFile, remoteDir + "Organisations/" + orgIdString + "/" + "Reports/report" + reportNumber + "-" + date +".txt");
 
         }catch (Exception e){
@@ -426,7 +435,7 @@
     }
 
     public static void main(String[] args) throws Exception {
-        ServerAccess access = new ServerAccess();
+        ServerAccess access = new ServerAccess(new JSch());
 
         File file = new File("C:/test.jpg");
 
Index: backend/src/main/java/com/GiveaLot/givealot/Organisation/service/OrganisationServiceImp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.GiveaLot.givealot.Organisation.service;\r\n\r\nimport com.GiveaLot.givealot.Certificate.dataclass.Certificate;\r\nimport com.GiveaLot.givealot.Certificate.repository.CertificateRepository;\r\nimport com.GiveaLot.givealot.Certificate.service.CertificateService;\r\nimport com.GiveaLot.givealot.Organisation.model.OrganisationInfo;\r\nimport com.GiveaLot.givealot.Organisation.model.OrganisationPoints;\r\nimport com.GiveaLot.givealot.Organisation.model.Organisations;\r\nimport com.GiveaLot.givealot.Organisation.repository.OrganisationInfoRepository;\r\nimport com.GiveaLot.givealot.Organisation.repository.OrganisationRepository;\r\nimport com.GiveaLot.givealot.Organisation.repository.organisationPointsRepository;\r\nimport com.GiveaLot.givealot.Organisation.requests.*;\r\nimport com.GiveaLot.givealot.Server.ServerAccess;\r\nimport com.GiveaLot.givealot.User.repository.UserRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.math.BigInteger;\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDate;\r\nimport java.util.Date;\r\n\r\n\r\n@Service\r\npublic class OrganisationServiceImp implements OrganisationService {\r\n\r\n\r\n    @Autowired\r\n    private OrganisationRepository organisationRepository;\r\n\r\n    @Autowired\r\n    private OrganisationInfoRepository organisationInfoRepository;\r\n\r\n    @Autowired\r\n    organisationPointsRepository organisationPointsRepository;\r\n\r\n    @Autowired\r\n    private CertificateRepository certificateRepository;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private CertificateService certificateService;\r\n\r\n    @Override\r\n    public Organisations selectOrganisation(long orgId) throws Exception {\r\n\r\n        Organisations res = organisationRepository.selectOrganisationById(orgId);\r\n        if (res != null)\r\n            return res;\r\n        else throw new Exception(\"Exception: id does not exist, check spelling\");\r\n    }\r\n\r\n    @Override\r\n    public OrganisationInfo selectOrganisationInfo(long orgId) throws Exception {\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        OrganisationInfo organisationInfo = organisationInfoRepository.selectOrganisationInfo(orgId);\r\n\r\n        if (organisationInfo == null) {\r\n            organisationInfo = new OrganisationInfo();\r\n            organisationInfo.setOrgId(orgId);\r\n\r\n            organisationInfoRepository.save(organisationInfo);\r\n            throw new Exception(\"Exception: system level error, organisation info did not exist, rerun \" +\r\n                    \"the contract\");\r\n        } else return organisationInfo;\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrganisation(Organisations organisation) throws Exception\r\n    {\r\n        if(organisation == null)\r\n            throw new Exception(\"invalid organisation object: null\");\r\n\r\n        if(organisation.getOrgName() == null || organisation.getOrgDescription() == null||\r\n                organisation.getPassword() == null|| organisation.getOrgSector() == null ||\r\n                organisation.getOrgEmail() == null|| organisation.getContactNumber() == null||\r\n                organisation.getContactPerson() == null|| organisation.getSlogan() == null)\r\n            throw new Exception(\"invalid field provided: null\");\r\n\r\n        organisation.setDirectory(\"/home/ubuntu/Organisations/\");\r\n        organisation.setStatus(\"active\");\r\n\r\n        if(organisationRepository.selectOrganisationByEmail(organisation.getOrgEmail()) != null)\r\n            throw new Exception(\"Email already exists\");\r\n\r\n        else if (organisation.getOrgName().isEmpty() || organisation.getOrgName().length()>255)\r\n            throw new Exception(\"Exception: orgName does not satisfy the database constraints\");\r\n\r\n        else if (organisation.getOrgDescription().isEmpty() || organisation.getOrgDescription().length()>65535)\r\n            throw new Exception(\"Exception: orgDescription does not satisfy the database constraints\");\r\n\r\n        else if (organisation.getPassword().isEmpty() || organisation.getPassword().length()>255)\r\n            throw new Exception(\"Exception: password does not satisfy the database constraints\");\r\n\r\n        else if (organisation.getOrgSector().isEmpty() || organisation.getOrgSector().length()>255)\r\n            throw new Exception(\"Exception: orgSector does not satisfy the database constraints\");\r\n\r\n        else if (organisation.getStatus().isEmpty() || organisation.getStatus().length()>255)\r\n            throw new Exception(\"Exception: status does not satisfy the database constraints\");\r\n\r\n        else if (organisation.getOrgEmail().isEmpty() || organisation.getOrgEmail().length()>255)\r\n            throw new Exception(\"Exception: orgEmail does not satisfy the database constraints\");\r\n\r\n        else if (organisation.getDirectory().isEmpty() || organisation.getDirectory().length()>255)\r\n            throw new Exception(\"Exception: directory does not satisfy the database constraints\");\r\n\r\n        else if (organisation.getContactNumber().isEmpty() || organisation.getContactNumber().length()>255)\r\n            throw new Exception(\"Exception: contactNumber does not satisfy the database constraints\");\r\n\r\n        else if (organisation.getContactPerson().isEmpty() || organisation.getContactPerson().length()>255)\r\n            throw new Exception(\"Exception: contactPerson does not satisfy the database constraints\");\r\n\r\n        else if (organisation.getSlogan().isEmpty() || organisation.getSlogan().length()>255)\r\n            throw new Exception(\"Exception: orgSlogan does not satisfy the database constraints\");\r\n\r\n        /** Setup **/\r\n\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        /** Setup dates **/\r\n\r\n        java.util.Date dateCurrent = new Date();\r\n        java.util.Date dateEx = new Date();\r\n\r\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n\r\n        String dateCreated = format.format(dateCurrent);\r\n\r\n        int year = dateCurrent.getYear();\r\n        dateEx.setYear(year+1);\r\n        String dateExpiry = format.format(dateEx);\r\n\r\n        /** Salts and hashes password **/\r\n\r\n        String salt = getMd5(organisation.getOrgEmail());\r\n\r\n        String salted = getMd5(organisation.getPassword() + salt);\r\n\r\n        organisation.setPassword(salted);\r\n\r\n        /** Create tables and directory **/\r\n\r\n        Certificate certificate = new Certificate(dateCreated,dateExpiry,0);\r\n\r\n        access.createOrganisationDirectory(organisation.getOrgId(), organisation.getOrgName());\r\n\r\n        long id = organisationRepository.selectOrganisationByEmail(organisation.getOrgEmail()).getOrgId();\r\n        String directory = \"/home/ubuntu/Organisations/\" + id;\r\n\r\n        organisationRepository.updateRepo(id,directory);\r\n\r\n        LocalDate date = LocalDate.now(); /* registration date */\r\n\r\n\r\n        organisationInfoRepository.save(new OrganisationInfo((long) id));\r\n        organisationPointsRepository.save(new OrganisationPoints((long) id));\r\n        certificateRepository.save(certificate);\r\n\r\n        certificateService.addCertificate(id);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean suspendOrganisation(long orgId) throws Exception {\r\n\r\n\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"ID doesn't exist\");\r\n        else {\r\n            if (organisationRepository.updateStatus(orgId, \"suspended\".toLowerCase()) != 1)\r\n                throw new Exception(\"status not updated\");\r\n            else return true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean reactivateOrganisation(long orgId) throws Exception {\r\n\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"ID doesn't exist\");\r\n        else {\r\n            if (organisationRepository.updateStatus(orgId, \"active\".toLowerCase()) != 1)\r\n                throw new Exception(\"status not updated\");\r\n            else return true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean investigateOrganisation(long orgId) throws Exception {\r\n\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"ID doesn't exist\");\r\n        else {\r\n            if (organisationRepository.updateStatus(orgId, \"investigating\".toLowerCase()) != 1)\r\n                throw new Exception(\"status not updated\");\r\n            else return true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrgWebsite(AddOrgWebsiteRequest request) throws Exception {\r\n        if (request == null)\r\n            throw new Exception(\"Exception: request not set\");\r\n        else if (request.getWebsite() == null)\r\n            throw new Exception(\"Exception: value not set\");\r\n        else if (request.getWebsite().isEmpty())\r\n            throw new Exception(\"Exception: invalid value length\");\r\n        else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.addOrgWebsite(request.getOrgId(), request.getWebsite()) != 1)\r\n            throw new Exception(\"Exception: value field failed to update\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeOrgWebsite(long orgId) throws Exception {\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.selectOrganisationInfo(orgId) == null) {\r\n            /*\r\n             * Because organisation already exists, set the field\r\n             * */\r\n            OrganisationInfo organisationInfo = new OrganisationInfo();\r\n            organisationInfo.setOrgId(orgId);\r\n\r\n            organisationInfoRepository.save(organisationInfo);\r\n            throw new Exception(\"Exception: system level error, organisation info did not exist, rerun \" +\r\n                    \"the contract\");\r\n        }\r\n\r\n        if (organisationInfoRepository.removeOrgWebsite(orgId) != 1)\r\n            throw new Exception(\"Exception: value field not updated\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrgAddress(AddOrgAddressRequest request) throws Exception {\r\n        if (request == null)\r\n            throw new Exception(\"Exception: request not set\");\r\n        else if (request.getAddress() == null)\r\n            throw new Exception(\"Exception: value not set\");\r\n        else if (request.getAddress().isEmpty())\r\n            throw new Exception(\"Exception: invalid value length\");\r\n        else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.addOrgAddress(request.getOrgId(), request.getAddress()) != 1)\r\n            throw new Exception(\"Exception: value field failed to update\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeOrgAddress(long orgId) throws Exception {\r\n\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.selectOrganisationInfo(orgId) == null) {\r\n            /*\r\n             * Because organisation already exists, set the field\r\n             * */\r\n            OrganisationInfo organisationInfo = new OrganisationInfo();\r\n            organisationInfo.setOrgId(orgId);\r\n\r\n            organisationInfoRepository.save(organisationInfo);\r\n            throw new Exception(\"Exception: system level error, organisation info did not exist, rerun \" +\r\n                    \"the contract\");\r\n        }\r\n\r\n        if (organisationInfoRepository.removeOrgAddress(orgId) != 1)\r\n            throw new Exception(\"Exception: value field not updated\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrgTaxRef(AddOrgTaxRefRequest request) throws Exception {\r\n        if (request == null)\r\n            throw new Exception(\"Exception: request not set\");\r\n\r\n        else if (request.getReference() == null)\r\n            throw new Exception(\"Exception: tax reference not set\");\r\n\r\n        else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        String name = organisationRepository.selectOrganisationById(request.getOrgId()).getOrgName();\r\n\r\n        access.uploadTaxReference(request.getOrgId(),name,request.getReference());\r\n\r\n        if (organisationInfoRepository.addOrgTaxRef(request.getOrgId(), \"provided\") != 1)\r\n            throw new Exception(\"Exception: value field failed to update\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeOrgTaxRef(long orgId) throws Exception {\r\n\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.selectOrganisationInfo(orgId) == null) {\r\n            /*\r\n             * Because organisation already exists, set the field\r\n             * */\r\n            OrganisationInfo organisationInfo = new OrganisationInfo();\r\n            organisationInfo.setOrgId(orgId);\r\n\r\n            organisationInfoRepository.save(organisationInfo);\r\n            throw new Exception(\"Exception: system level error, organisation info did not exist, rerun \" +\r\n                    \"the contract\");\r\n        }\r\n\r\n        if (organisationInfoRepository.removeOrgTaxRef(orgId) != 1)\r\n            throw new Exception(\"Exception: tax reference field not updated\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrgSocials(AddSocialsRequest request) throws Exception {\r\n        if (request == null)\r\n            throw new Exception(\"Exception: request is not set\");\r\n\r\n        else if (request.getType() == null)\r\n            throw new Exception(\"Exception: request type is not set\");\r\n\r\n        else if (request.getUrl().isEmpty())\r\n            throw new Exception(\"Exception: url is empty\");\r\n\r\n        else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)\r\n            throw new Exception(\"Exception: request id does not exist\");\r\n\r\n        if (request.getType().trim().equalsIgnoreCase(\"twitter\")) {\r\n            if (organisationInfoRepository.addTwitter(request.getOrgId(), request.getUrl()) != 1)\r\n                throw new Exception(\"Exception: social not added\");\r\n        } else if (request.getType().trim().equalsIgnoreCase(\"instagram\")) {\r\n            if (organisationInfoRepository.addInstagram(request.getOrgId(), request.getUrl()) != 1)\r\n                throw new Exception(\"Exception: social not added\");\r\n        } else if (request.getType().trim().equalsIgnoreCase(\"facebook\")) {\r\n            if (organisationInfoRepository.addFacebook(request.getOrgId(), request.getUrl()) != 1)\r\n                throw new Exception(\"Exception: social not added\");\r\n        } else throw new Exception(\"Exception: social not identified\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeOrgSocials(long orgId, String type) throws Exception {\r\n\r\n        if (type == null)\r\n            throw new Exception(\"Exception: request type is not set\");\r\n\r\n        else if (type.isEmpty())\r\n            throw new Exception(\"Exception: type is empty\");\r\n\r\n        else if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: request id does not exist\");\r\n\r\n        if (type.trim().equalsIgnoreCase(\"twitter\")) {\r\n            if (organisationInfoRepository.removeTwitter(orgId) != 1)\r\n                throw new Exception(\"Exception: social not removed\");\r\n        } else if (type.trim().equalsIgnoreCase(\"instagram\")) {\r\n            if (organisationInfoRepository.removeInstagram(orgId) != 1)\r\n                throw new Exception(\"Exception: social not removed\");\r\n        } else if (type.trim().equalsIgnoreCase(\"facebook\")) {\r\n            if (organisationInfoRepository.removeFacebook(orgId) != 1)\r\n                throw new Exception(\"Exception: social not removed\");\r\n        } else throw new Exception(\"Exception: social not identified\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrgAuditDoc(AddOrgAuditInfoRequest request) throws Exception {\r\n        if (request == null)\r\n            throw new Exception(\"Exception: request not set\");\r\n\r\n        else if (request.getAudit() == null)\r\n            throw new Exception(\"Exception: tax reference not set\");\r\n\r\n        else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        String name = organisationRepository.selectOrganisationById(request.getOrgId()).getOrgName();\r\n\r\n        access.uploadAuditDocument(request.getOrgId(),name,request.getAudit());\r\n\r\n        if (organisationInfoRepository.addAuditDoc(request.getOrgId(), \"provided\") != 1)\r\n            throw new Exception(\"Exception: value field failed to update\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeOrgAuditDoc(long orgId) throws Exception {\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.selectOrganisationInfo(orgId) == null) {\r\n            /*\r\n             * Because organisation already exists, set the field\r\n             * */\r\n            OrganisationInfo organisationInfo = new OrganisationInfo();\r\n            organisationInfo.setOrgId(orgId);\r\n\r\n            organisationInfoRepository.save(organisationInfo);\r\n            throw new Exception(\"Exception: system level error, organisation info did not exist, rerun the contract\");\r\n        }\r\n\r\n        if (organisationInfoRepository.removeAuditDoc(orgId) != 1)\r\n            throw new Exception(\"Exception: tax reference field not updated\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrgAuditor(AddOrgAuditorRequest request) throws Exception {\r\n        if (request == null)\r\n            throw new Exception(\"Exception: request not set\");\r\n        else if (request.getAuditor() == null)\r\n            throw new Exception(\"Exception: value not set\");\r\n        else if (request.getAuditor().isEmpty())\r\n            throw new Exception(\"Exception: invalid value length\");\r\n        else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.addAuditor(request.getOrgId(), request.getAuditor()) != 1)\r\n            throw new Exception(\"Exception: value field failed to update\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeOrgAuditor(long orgId) throws Exception {\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.selectOrganisationInfo(orgId) == null) {\r\n            /*\r\n             * Because organisation already exists, set the field\r\n             * */\r\n            OrganisationInfo organisationInfo = new OrganisationInfo();\r\n            organisationInfo.setOrgId(orgId);\r\n\r\n            organisationInfoRepository.save(organisationInfo);\r\n            throw new Exception(\"Exception: system level error, organisation info did not exist, rerun the contract\");\r\n        }\r\n\r\n        if (organisationInfoRepository.removeAuditor(orgId) != 1)\r\n            throw new Exception(\"Exception: tax reference field not updated\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrgCommittee(AddOrgCommitteeRequest request) throws Exception {\r\n        if (request == null)\r\n            throw new Exception(\"Exception: request not set\");\r\n        else if (request.getCommittee() == null)\r\n            throw new Exception(\"Exception: value not set\");\r\n        else if (request.getCommittee().isEmpty())\r\n            throw new Exception(\"Exception: invalid value length\");\r\n        else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.addCommittee(request.getOrgId(), request.getCommittee()) != 1)\r\n            throw new Exception(\"Exception: value field failed to update\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeOrgCommittee(long orgId) throws Exception {\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.selectOrganisationInfo(orgId) == null) {\r\n            /*\r\n             * Because organisation already exists, set the field\r\n             * */\r\n            OrganisationInfo organisationInfo = new OrganisationInfo();\r\n            organisationInfo.setOrgId(orgId);\r\n\r\n            organisationInfoRepository.save(organisationInfo);\r\n            throw new Exception(\"Exception: system level error, organisation info did not exist, rerun the contract\");\r\n        }\r\n\r\n        if (organisationInfoRepository.removeCommittee(orgId) != 1)\r\n            throw new Exception(\"Exception: tax reference field not updated\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrgDonationInfo(AddOrgDonationInfoRequest request) throws Exception {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeOrgDonationInfo(long orgId) throws Exception {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrgNGO(AddOrgNGORequest request) throws Exception {\r\n        if (request == null)\r\n            throw new Exception(\"Exception: request not set\");\r\n        else if (request.getNgoNumber() == null)\r\n            throw new Exception(\"Exception: value not set\");\r\n        else if (request.getNgoNumber().isEmpty())\r\n            throw new Exception(\"Exception: invalid value length\");\r\n        else if (request.getNgoDate() == null)\r\n            throw new Exception(\"Exception: value not set\");\r\n        else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.addNGONumber(request.getOrgId(), request.getNgoNumber()) != 1)\r\n            throw new Exception(\"Exception: value field failed to update\");\r\n        if (organisationInfoRepository.addNGODate(request.getOrgId(), request.getNgoDate()) != 1)\r\n            throw new Exception(\"Exception: value field failed to update\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeOrgNGO(long orgId) throws Exception {\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.selectOrganisationInfo(orgId) == null) {\r\n            /*\r\n             * Because organisation already exists, set the field\r\n             * */\r\n            OrganisationInfo organisationInfo = new OrganisationInfo();\r\n            organisationInfo.setOrgId(orgId);\r\n\r\n            organisationInfoRepository.save(organisationInfo);\r\n            throw new Exception(\"Exception: system level error, organisation info did not exist, rerun the contract\");\r\n        }\r\n\r\n        if (organisationInfoRepository.removeNGONUmber(orgId) != 1)\r\n            throw new Exception(\"Exception: tax reference field not updated\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrgEstDate(AddOrgEstDateRequest request) throws Exception {\r\n        if (request == null)\r\n            throw new Exception(\"Exception: request not set\");\r\n        else if (request.getDate() == null)\r\n            throw new Exception(\"Exception: value not set\");\r\n        else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.addEstDate(request.getOrgId(), request.getDate()) != 1)\r\n            throw new Exception(\"Exception: value field failed to update\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeOrgEstDate(long orgId) throws Exception {\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.selectOrganisationInfo(orgId) == null) {\r\n            /*\r\n             * Because organisation already exists, set the field\r\n             * */\r\n            OrganisationInfo organisationInfo = new OrganisationInfo();\r\n            organisationInfo.setOrgId(orgId);\r\n\r\n            organisationInfoRepository.save(organisationInfo);\r\n            throw new Exception(\"Exception: system level error, organisation info did not exist, rerun the contract\");\r\n        }\r\n\r\n        if (organisationInfoRepository.removeEstDate(orgId) != 1)\r\n            throw new Exception(\"Exception: tax reference field not updated\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean addOrgImage(AddOrgImageRequest request) throws Exception {\r\n        if (request == null)\r\n            throw new Exception(\"Exception: request not set\");\r\n\r\n        else if (request.getImage() == null)\r\n            throw new Exception(\"Exception: tax reference not set\");\r\n\r\n        else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        String name = organisationRepository.selectOrganisationById(request.getOrgId()).getOrgName();\r\n\r\n        access.uploadImageJPG(request.getOrgId(),name,request.getImage());\r\n\r\n        int numImages = organisationInfoRepository.selectOrganisationInfo(request.getOrgId()).getNumberOfImages();\r\n\r\n        if (organisationInfoRepository.incrementImage(request.getOrgId(), numImages + 1) != 1)\r\n            throw new Exception(\"Exception: value field failed to update\");\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean removeOrgImage(long orgId) throws Exception {\r\n\r\n        if (organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: Organisation ID does not exist\");\r\n\r\n        if (organisationInfoRepository.selectOrganisationInfo(orgId) == null) {\r\n            /*\r\n             * Because organisation already exists, set the field\r\n             * */\r\n            OrganisationInfo organisationInfo = new OrganisationInfo();\r\n            organisationInfo.setOrgId(orgId);\r\n\r\n            organisationInfoRepository.save(organisationInfo);\r\n            throw new Exception(\"Exception: system level error, organisation info did not exist, rerun the contract\");\r\n        }\r\n\r\n        int numImages = organisationInfoRepository.selectOrganisationInfo(orgId).getNumberOfImages();\r\n\r\n        if (organisationInfoRepository.decrementImage(orgId, numImages - 1) != 1)\r\n            throw new Exception(\"Exception: tax reference field not updated\");\r\n\r\n        return true;\r\n    }\r\n\r\n    public String getMd5(String input) {\r\n        try {\r\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n\r\n            byte[] messageDigest = md.digest(input.getBytes());\r\n\r\n            BigInteger no = new BigInteger(1, messageDigest);\r\n\r\n            String hashtext = no.toString(16);\r\n            while (hashtext.length() < 32) {\r\n                hashtext = \"0\" + hashtext;\r\n            }\r\n            return hashtext;\r\n        } catch (NoSuchAlgorithmException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n    /*\r\n    * points\r\n    * points\r\n    * points\r\n    * */\r\n\r\n    @Override\r\n    public boolean confirmValidity(Long orgId,Long adminId,String type,boolean confirmValidity) throws Exception\r\n    {\r\n        if(orgId == null)\r\n            throw new Exception(\"Exception: organisation id is not set\");\r\n        else if(adminId == null)\r\n            throw new Exception(\"Exception: admin id is not set\");\r\n        else if(type == null)\r\n            throw new Exception(\"Exception: type is not set\");\r\n        else if(type.isEmpty())\r\n            throw new Exception(\"Exception: type is empty\");\r\n        else if(userRepository.isAdmin(adminId) == null)\r\n            throw new Exception(\"Exception: user unauthorized\");\r\n        /*\r\n        * check if ID belongs to user\r\n        */\r\n\r\n        /*\r\n        * true: for valid\r\n        * false: invalid\r\n        * */\r\n        if(type.equalsIgnoreCase(\"address\"))\r\n        {\r\n            Integer dps = 0, currentPoints = 0;\r\n            int res = confirmValidity ? organisationPointsRepository.Address(orgId,true) : organisationPointsRepository.Address(orgId,false);\r\n            if(res != 1)\r\n                throw new Exception(\"Exception: address validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Address(orgId,false) : organisationPointsRepository.Address(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n            else currentPoints = certificate_tmp.getPoints();\r\n\r\n            res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Address(orgId,false) : organisationPointsRepository.Address(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n\r\n        }\r\n        else if(type.equalsIgnoreCase(\"audit\"))\r\n        {\r\n            Integer currentPoints = 0, dps = 0;\r\n            Integer res = confirmValidity ? organisationPointsRepository.Audit(orgId,true) : organisationPointsRepository.Audit(orgId,false);\r\n            if(res != -1)\r\n                throw new Exception(\"Exception: audit validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Audit(orgId,false) : organisationPointsRepository.Audit(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n            else currentPoints = certificate_tmp.getPoints();\r\n\r\n                    res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Audit(orgId,false) : organisationPointsRepository.Audit(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n        }\r\n        else if(type.equalsIgnoreCase(\"auditor\"))\r\n        {\r\n            Integer currentPoints = 0,dps = 0;\r\n            Integer res = confirmValidity ? organisationPointsRepository.Auditor(orgId,true) : organisationPointsRepository.Auditor(orgId,false);\r\n            if(res != -1)\r\n                throw new Exception(\"Exception: auditor validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Auditor(orgId,false) : organisationPointsRepository.Auditor(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }else currentPoints = certificate_tmp.getPoints();\r\n\r\n            res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Auditor(orgId,false) : organisationPointsRepository.Auditor(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n        }\r\n        else if(type.equalsIgnoreCase(\"committee\"))\r\n        {\r\n            Integer currentPoints = 0,dps = 0;\r\n            Integer res = confirmValidity ? organisationPointsRepository.Committee(orgId,true) : organisationPointsRepository.Committee(orgId,false);\r\n            if(res != -1)\r\n                throw new Exception(\"Exception: committee validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Committee(orgId,false) : organisationPointsRepository.Committee(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }else currentPoints = certificate_tmp.getPoints();\r\n\r\n            res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Committee(orgId,false) : organisationPointsRepository.Committee(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n        }\r\n        else if(type.equalsIgnoreCase(\"establishment_date\"))\r\n        {\r\n            Integer currentPoints = 0,dps = 0;\r\n            Integer res = confirmValidity ? organisationPointsRepository.EstablishmentDate(orgId,true) : organisationPointsRepository.EstablishmentDate(orgId,false);\r\n            if(res != -1)\r\n                throw new Exception(\"Exception: establishment date validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.EstablishmentDate(orgId,false) : organisationPointsRepository.EstablishmentDate(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }else currentPoints = certificate_tmp.getPoints();\r\n\r\n            res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.EstablishmentDate(orgId,false) : organisationPointsRepository.EstablishmentDate(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n        }\r\n        else if(type.equalsIgnoreCase(\"facebook\"))\r\n        {\r\n            Integer currentPoints = 0,dps = 0;\r\n            Integer res = confirmValidity ? organisationPointsRepository.Facebook(orgId,true) : organisationPointsRepository.Facebook(orgId,false);\r\n            if(res != -1)\r\n                throw new Exception(\"Exception: facebook validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Facebook(orgId,false) : organisationPointsRepository.Facebook(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }else currentPoints = certificate_tmp.getPoints();\r\n\r\n            res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Facebook(orgId,false) : organisationPointsRepository.Facebook(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n        }\r\n        else if(type.equalsIgnoreCase(\"instagram\"))\r\n        {\r\n            Integer currentPoints = 0,dps = 0;\r\n            Integer res = confirmValidity ? organisationPointsRepository.Instagram(orgId,true) : organisationPointsRepository.Instagram(orgId,false);\r\n            if(res != -1)\r\n                throw new Exception(\"Exception: instagram validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Instagram(orgId,false) : organisationPointsRepository.Instagram(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n            else currentPoints = certificate_tmp.getPoints();\r\n            res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Instagram(orgId,false) : organisationPointsRepository.Instagram(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n        }\r\n        else if(type.equalsIgnoreCase(\"twitter\"))\r\n        {\r\n            Integer currentPoints = 0,dps = 0;\r\n            Integer res = confirmValidity ? organisationPointsRepository.Twitter(orgId,true) : organisationPointsRepository.Twitter(orgId,false);\r\n            if(res != -1)\r\n                throw new Exception(\"Exception: twitter validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Twitter(orgId,false) : organisationPointsRepository.Twitter(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }else currentPoints = certificate_tmp.getPoints();\r\n\r\n            res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Twitter(orgId,false) : organisationPointsRepository.Twitter(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n        }\r\n        else if(type.equalsIgnoreCase(\"ngo_date\"))\r\n        {\r\n            Integer currentPoints = 0,dps = 0;\r\n            Integer res = confirmValidity ? organisationPointsRepository.NGO_Date(orgId,true) : organisationPointsRepository.NGO_Date(orgId,false);\r\n            if(res != -1)\r\n                throw new Exception(\"Exception: NGO date validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.NGO_Date(orgId,false) : organisationPointsRepository.NGO_Date(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }else currentPoints = certificate_tmp.getPoints();\r\n\r\n            res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.NGO_Date(orgId,false) : organisationPointsRepository.NGO_Date(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n        }\r\n        else if(type.equalsIgnoreCase(\"ngo_number\"))\r\n        {\r\n            Integer currentPoints = 0,dps = 0;\r\n            Integer res = confirmValidity ? organisationPointsRepository.NGO_Number(orgId,true) : organisationPointsRepository.NGO_Number(orgId,false);\r\n            if(res != -1)\r\n                throw new Exception(\"Exception: NGO number validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.NGO_Number(orgId,false) : organisationPointsRepository.NGO_Number(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }else currentPoints = certificate_tmp.getPoints();\r\n\r\n            res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.NGO_Number(orgId,false) : organisationPointsRepository.NGO_Number(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n        }\r\n        else if(type.equalsIgnoreCase(\"tax_raf\"))\r\n        {\r\n            Integer currentPoints = 0,dps = 0;\r\n            Integer res = confirmValidity ? organisationPointsRepository.taxRaf(orgId,true) : organisationPointsRepository.taxRaf(orgId,false);\r\n            if(res != -1)\r\n                throw new Exception(\"Exception: tax raf validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.taxRaf(orgId,false) : organisationPointsRepository.taxRaf(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }else currentPoints = certificate_tmp.getPoints();\r\n\r\n            res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.taxRaf(orgId,false) : organisationPointsRepository.taxRaf(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n        }\r\n        else if(type.equalsIgnoreCase(\"website\"))\r\n        {\r\n            Integer currentPoints = 0,dps = 0;\r\n            Integer res = confirmValidity ? organisationPointsRepository.Website(orgId,true) : organisationPointsRepository.Website(orgId,false);\r\n            if(res != -1)\r\n                throw new Exception(\"Exception: address validity not confirmed\");\r\n\r\n            Certificate certificate_tmp = certificateRepository.selectPointsById(orgId);\r\n            if(certificate_tmp == null) /*perform rollback*/\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Website(orgId,false) : organisationPointsRepository.Website(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }else currentPoints = certificate_tmp.getPoints();\r\n\r\n            res = confirmValidity ? certificateRepository.updatePoints(orgId,currentPoints + dps) : certificateRepository.updatePoints(orgId,currentPoints - dps);\r\n\r\n            if(res != 1)\r\n            {\r\n                res = confirmValidity ? organisationPointsRepository.Website(orgId,false) : organisationPointsRepository.Website(orgId,true);\r\n                if(res == 1)\r\n                    throw new Exception(\"Exception: error occurred, rollback action performed successfully\");\r\n                else throw new Exception(\"Exception: error occurred, rollback action failed\");\r\n            }\r\n        }\r\n        else throw new Exception(\"Exception: type is incorrect\");\r\n        return false;\r\n    }\r\n\r\n\r\n    @Override\r\n    public OrganisationPoints selectOrganisationPoints(long orgId) throws Exception {\r\n\r\n        if(organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: id does not exist\");\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Integer numberOfImages(Long orgId) throws Exception\r\n    {\r\n        if(orgId == null)\r\n            throw new Exception(\"Exception: id is not set\");\r\n\r\n        else if(organisationRepository.selectOrganisationById(orgId) == null)\r\n            throw new Exception(\"Exception: id does not exist\");\r\n\r\n        Integer res = organisationPointsRepository.getNumberOfEmages(orgId);\r\n        if(res != 1)\r\n            throw new Exception(\"Exception: id does not exist\");\r\n\r\n        return res;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Organisation/service/OrganisationServiceImp.java b/backend/src/main/java/com/GiveaLot/givealot/Organisation/service/OrganisationServiceImp.java
--- a/backend/src/main/java/com/GiveaLot/givealot/Organisation/service/OrganisationServiceImp.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/src/main/java/com/GiveaLot/givealot/Organisation/service/OrganisationServiceImp.java	(date 1629153808975)
@@ -12,6 +12,7 @@
 import com.GiveaLot.givealot.Organisation.requests.*;
 import com.GiveaLot.givealot.Server.ServerAccess;
 import com.GiveaLot.givealot.User.repository.UserRepository;
+import com.jcraft.jsch.JSch;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
@@ -122,7 +123,7 @@
 
         /** Setup **/
 
-        ServerAccess access = new ServerAccess();
+        ServerAccess access = new ServerAccess(new JSch());
 
         /** Setup dates **/
 
@@ -296,7 +297,7 @@
         else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)
             throw new Exception("Exception: Organisation ID does not exist");
 
-        ServerAccess access = new ServerAccess();
+        ServerAccess access = new ServerAccess(new JSch());
 
         String name = organisationRepository.selectOrganisationById(request.getOrgId()).getOrgName();
 
@@ -397,7 +398,7 @@
         else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)
             throw new Exception("Exception: Organisation ID does not exist");
 
-        ServerAccess access = new ServerAccess();
+        ServerAccess access = new ServerAccess(new JSch());
 
         String name = organisationRepository.selectOrganisationById(request.getOrgId()).getOrgName();
 
@@ -610,7 +611,7 @@
         else if (organisationRepository.selectOrganisationById(request.getOrgId()) == null)
             throw new Exception("Exception: Organisation ID does not exist");
 
-        ServerAccess access = new ServerAccess();
+        ServerAccess access = new ServerAccess(new JSch());
 
         String name = organisationRepository.selectOrganisationById(request.getOrgId()).getOrgName();
 
Index: backend/src/main/java/com/GiveaLot/givealot/Report/service/ReportServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.GiveaLot.givealot.Report.service;\r\n\r\nimport com.GiveaLot.givealot.Organisation.repository.OrganisationInfoRepository;\r\nimport com.GiveaLot.givealot.Report.dataclass.Report;\r\nimport com.GiveaLot.givealot.Server.ServerAccess;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.sql.*;\r\n\r\n@Service\r\npublic class ReportServiceImpl implements ReportService {\r\n\r\n    @Autowired\r\n    private OrganisationInfoRepository organisationInfoRepository;\r\n\r\n    public boolean createReportFile(Report report) throws Exception{\r\n\r\n        try {\r\n\r\n            /** Create file **/\r\n\r\n            String reportName = \"report\" + report.getId();\r\n            reportName = reportName.replaceAll(\"[^a-zA-Z0-9]\", \"\");\r\n            File file = new File(\"frontend/givealot/reports/organisationReport/\" + reportName + \".txt\");\r\n            if (file.createNewFile()) {\r\n            } else {\r\n                throw new Exception(\"Exception: File already exists\");\r\n            }\r\n\r\n            /** Write to file **/\r\n\r\n            String id = report.getId().toString();\r\n            String date = report.getDate().toString();\r\n            String orgId = Long.toString(report.getOrgId());\r\n            FileWriter writer = new FileWriter(\"frontend/givealot/reports/organisationReport/\" + reportName + \".txt\");\r\n\r\n            writer.write(\"ID: \");\r\n            writer.write(id);\r\n            writer.write(\"\\n\");\r\n            writer.write(\"Date: \");\r\n            writer.write(date);\r\n            writer.write(\"\\n\");\r\n            writer.write(\"Reporter email: \");\r\n            writer.write(report.getReporterEmail());\r\n            writer.write(\"\\n\");\r\n            writer.write(\"Organisation ID: \");\r\n            writer.write(orgId);\r\n            writer.write(\"\\n\");\r\n            writer.write(\"Organisation Name: \");\r\n            writer.write(report.getOrgName());\r\n            writer.write(\"\\n\");\r\n            writer.write(\"Type: \");\r\n            writer.write(report.getReportType());\r\n            writer.write(\"\\n\");\r\n            writer.write(\"Description: \");\r\n            writer.write(report.getReportDescription());\r\n            writer.write(\"\\n\");\r\n\r\n            writer.close();\r\n\r\n            /** Update database **/\r\n\r\n            try\r\n            {\r\n                int reports = organisationInfoRepository.selectOrganisationInfo(report.getOrgId()).getNumberOfReports();\r\n                organisationInfoRepository.incrementReports(report.getOrgId(),reports+1);\r\n            }\r\n            catch (Exception e){\r\n                throw new SQLException(\"Exception: ID is not present in the database\");\r\n            }\r\n            ServerAccess access = new ServerAccess();\r\n            access.uploadReport(report.getOrgId(),file,date);\r\n            return true;\r\n        }\r\n        catch (Exception e) {\r\n            throw new Exception(\"Exception: \" + e);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        ReportServiceImpl reportService = new ReportServiceImpl();\r\n\r\n        Report report = new Report(45,\"New Org\",\"they stole my money\",\"theft\",\"reporterEmail\");\r\n\r\n        reportService.createReportFile(report);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Report/service/ReportServiceImpl.java b/backend/src/main/java/com/GiveaLot/givealot/Report/service/ReportServiceImpl.java
--- a/backend/src/main/java/com/GiveaLot/givealot/Report/service/ReportServiceImpl.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/src/main/java/com/GiveaLot/givealot/Report/service/ReportServiceImpl.java	(date 1629135508626)
@@ -3,6 +3,7 @@
 import com.GiveaLot.givealot.Organisation.repository.OrganisationInfoRepository;
 import com.GiveaLot.givealot.Report.dataclass.Report;
 import com.GiveaLot.givealot.Server.ServerAccess;
+import com.jcraft.jsch.JSch;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
@@ -71,7 +72,7 @@
             catch (Exception e){
                 throw new SQLException("Exception: ID is not present in the database");
             }
-            ServerAccess access = new ServerAccess();
+            ServerAccess access = new ServerAccess(new JSch());
             access.uploadReport(report.getOrgId(),file,date);
             return true;
         }
Index: .idea/libraries/Maven__org_objenesis_objenesis_3_2.xml
===================================================================
diff --git a/.idea/libraries/Maven__org_objenesis_objenesis_3_2.xml b/.idea/libraries/Maven__org_objenesis_objenesis_3_2.xml
deleted file mode 100644
--- a/.idea/libraries/Maven__org_objenesis_objenesis_3_2.xml	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ /dev/null	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="Maven: org.objenesis:objenesis:3.2">
-    <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/objenesis/objenesis/3.2/objenesis-3.2.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/objenesis/objenesis/3.2/objenesis-3.2-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/objenesis/objenesis/3.2/objenesis-3.2-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_mockito_mockito_core_3_9_0.xml
===================================================================
diff --git a/.idea/libraries/Maven__org_mockito_mockito_core_3_9_0.xml b/.idea/libraries/Maven__org_mockito_mockito_core_3_9_0.xml
deleted file mode 100644
--- a/.idea/libraries/Maven__org_mockito_mockito_core_3_9_0.xml	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ /dev/null	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
@@ -1,13 +0,0 @@
-<component name="libraryTable">
-  <library name="Maven: org.mockito:mockito-core:3.9.0">
-    <CLASSES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/mockito/mockito-core/3.9.0/mockito-core-3.9.0.jar!/" />
-    </CLASSES>
-    <JAVADOC>
-      <root url="jar://$MAVEN_REPOSITORY$/org/mockito/mockito-core/3.9.0/mockito-core-3.9.0-javadoc.jar!/" />
-    </JAVADOC>
-    <SOURCES>
-      <root url="jar://$MAVEN_REPOSITORY$/org/mockito/mockito-core/3.9.0/mockito-core-3.9.0-sources.jar!/" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
Index: backend/src/main/java/com/GiveaLot/givealot/Report/exception/TypeException.java
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Report/exception/TypeException.java b/backend/src/main/java/com/GiveaLot/givealot/Report/exception/TypeException.java
deleted file mode 100644
--- a/backend/src/main/java/com/GiveaLot/givealot/Report/exception/TypeException.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ /dev/null	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
@@ -1,8 +0,0 @@
-package com.GiveaLot.givealot.Report.exception;
-
-public class TypeException extends ReportException
-{
-    public TypeException(){}
-    public TypeException(String message){super(message);}
-    public TypeException(String message,Throwable cause){super(message,cause);}
-}
\ No newline at end of file
Index: backend/src/main/java/com/GiveaLot/givealot/Report/exception/ReportException.java
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Report/exception/ReportException.java b/backend/src/main/java/com/GiveaLot/givealot/Report/exception/ReportException.java
deleted file mode 100644
--- a/backend/src/main/java/com/GiveaLot/givealot/Report/exception/ReportException.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ /dev/null	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
@@ -1,7 +0,0 @@
-package com.GiveaLot.givealot.Report.exception;
-
-public class ReportException extends Exception{
-    public ReportException(){}
-    public ReportException(String message){ super(message);}
-    public ReportException(String message,Throwable cause){super(message,cause);}
-}
Index: backend/src/main/java/com/GiveaLot/givealot/Report/exception/InvalidRequestException.java
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Report/exception/InvalidRequestException.java b/backend/src/main/java/com/GiveaLot/givealot/Report/exception/InvalidRequestException.java
deleted file mode 100644
--- a/backend/src/main/java/com/GiveaLot/givealot/Report/exception/InvalidRequestException.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ /dev/null	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
@@ -1,9 +0,0 @@
-package com.GiveaLot.givealot.Report.exception;
-
-
-public class InvalidRequestException extends ReportException
-{
-    public InvalidRequestException(){}
-    public InvalidRequestException(String message){super(message);}
-    public InvalidRequestException(String message,Throwable cause){super(message,cause);}
-}
\ No newline at end of file
Index: backend/src/main/java/com/GiveaLot/givealot/Report/exception/NotAuthorizedException.java
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Report/exception/NotAuthorizedException.java b/backend/src/main/java/com/GiveaLot/givealot/Report/exception/NotAuthorizedException.java
deleted file mode 100644
--- a/backend/src/main/java/com/GiveaLot/givealot/Report/exception/NotAuthorizedException.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ /dev/null	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
@@ -1,12 +0,0 @@
-package com.GiveaLot.givealot.Report.exception;
-
-
-
-public class NotAuthorizedException extends ReportException {
-    public NotAuthorizedException(){}
-    public NotAuthorizedException(String message){super(message);}
-    public NotAuthorizedException(String message, Throwable cause) {
-        super(message, cause);
-    }
-
-}
\ No newline at end of file
Index: backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.GiveaLot.givealot.Certificate.service;\r\n\r\nimport com.GiveaLot.givealot.Blockchain.Repository.BlockChainRepository;\r\nimport com.GiveaLot.givealot.Blockchain.dataclass.Blockchain;\r\nimport com.GiveaLot.givealot.Blockchain.service.BlockchainService;\r\nimport com.GiveaLot.givealot.Certificate.dataclass.Certificate;\r\nimport com.GiveaLot.givealot.Certificate.repository.CertificateRepository;\r\nimport com.GiveaLot.givealot.Notification.dataclass.Mail;\r\nimport com.GiveaLot.givealot.Notification.service.SendMailService;\r\nimport com.GiveaLot.givealot.Organisation.model.Organisations;\r\nimport com.GiveaLot.givealot.Organisation.repository.OrganisationRepository;\r\nimport com.GiveaLot.givealot.Server.ServerAccess;\r\nimport org.apache.pdfbox.Loader;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDDocumentCatalog;\r\nimport org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\r\nimport org.apache.pdfbox.pdmodel.interactive.form.PDField;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\nimport java.io.File;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\npublic class CertificateServiceImpl implements CertificateService {\r\n\r\n    private BlockchainService blockchainService;\r\n\r\n    @Autowired\r\n    private OrganisationRepository organisationRepository;\r\n\r\n    @Autowired\r\n    private CertificateRepository certificateRepository;\r\n\r\n    @Autowired\r\n    private BlockChainRepository blockChainRepository;\r\n\r\n\r\n    SendMailService service;\r\n\r\n    @Autowired\r\n    CertificateServiceImpl(SendMailService service)\r\n   {\r\n        this.service = service;\r\n   }\r\n\r\n    @Override\r\n    public boolean addCertificate(long orgId) throws Exception {\r\n\r\n        Certificate cert= certificateRepository.selectCertificateById(orgId);\r\n        Organisations organisation = organisationRepository.selectOrganisationById(orgId);\r\n\r\n       boolean certificateCreated = createPDFDocument(cert,organisation,0);\r\n\r\n        if(!certificateCreated){\r\n            throw new Exception(\"Exception: Problem creating and storing certificate\");\r\n        }\r\n\r\n        File certificate = retrieveCertificate(orgId, organisation.getOrgName());\r\n\r\n        String[] result = blockchainService\r\n                .uploadCertificate(orgId, certificate);\r\n        String certificateHash = result[0];\r\n        String txHash = result[1];\r\n        long index = blockchainService.findCertificateIndex(orgId);\r\n\r\n        Blockchain blockchain = new Blockchain(orgId,index,0,txHash,certificateHash);\r\n\r\n        blockChainRepository.save(blockchain);\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean updateCertificate(long orgId) throws Exception {\r\n\r\n        Organisations organisation = organisationRepository.selectOrganisationById(orgId);\r\n        Certificate cert = certificateRepository.selectCertificateById(orgId);\r\n        Blockchain blockchain = blockChainRepository.selectBlockchainOrgId(orgId);\r\n\r\n        boolean certificateCreated = createPDFDocument(cert,organisation,cert.getPoints());\r\n\r\n        if(!certificateCreated){\r\n            throw new Exception(\"Exception: Problem creating and storing certificate\");\r\n        }\r\n\r\n        File certificate = retrieveCertificate(orgId, organisation.getOrgName());\r\n\r\n        String[] result = blockchainService\r\n                .upgradeCertificate(0,orgId, certificate,0);\r\n\r\n        String certificateHash = result[0];\r\n        String txHash = result[1];\r\n\r\n        blockChainRepository.UpdateBlockchain(blockchain.getIndex(),blockchain.getLevel()+1,txHash,certificateHash,orgId);\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public File retrieveCertificate(long orgId, String orgName) throws Exception {\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        return access.downloadCertificate(orgId,orgName);\r\n    }\r\n\r\n    @Override\r\n    public boolean createPDFDocument(Certificate cert, Organisations organisation, int points) throws Exception {\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        access.downloadCertificateTemplate(points);\r\n\r\n        if (points!=0){\r\n            File deletion = new File(\"frontend/givealot/localFiles/\" + organisation.getOrgId() + \"certificate/CertificateComplete.pdf\");\r\n            deletion.delete();\r\n        }\r\n\r\n        String templateCertificate = \"backend/src/main/resources/TempCertificate/CertificateTemplate.pdf\";\r\n        String completeCertificate = \"frontend/givealot/localFiles/\" + organisation.getOrgId() + \"certificate/CertificateComplete.pdf\";\r\n\r\n        /** Setup the pdf file **/\r\n\r\n        File template = new File(templateCertificate);\r\n\r\n        PDDocument document = Loader.loadPDF(template);\r\n        PDDocumentCatalog catalog = document.getDocumentCatalog();\r\n\r\n        PDAcroForm acroForm = catalog.getAcroForm();\r\n\r\n        /** Assign acroform fields **/\r\n\r\n\r\n        try {\r\n\r\n            if (acroForm != null) {\r\n\r\n                PDField field = (PDField) acroForm.getField(\"name\"); // Name\r\n                field.setValue(organisation.getOrgName().toUpperCase());\r\n\r\n                field = (PDField) acroForm.getField(\"slogan\"); // Slogan\r\n                field.setValue(organisation.getSlogan());\r\n\r\n\r\n                field = (PDField) acroForm.getField(\"created\"); // Date Created\r\n                field.setValue(cert.getDateCreated());\r\n\r\n                field = (PDField) acroForm.getField(\"expiry\"); // Date Expiry\r\n                field.setValue(cert.getDateExpiry());\r\n\r\n                acroForm.flatten();\r\n\r\n            }\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: unable to create certificate\");\r\n        }\r\n\r\n        document.save(completeCertificate);\r\n        document.close();\r\n\r\n        access.uploadCertificate(organisation.getOrgId(), organisation.getOrgName());\r\n\r\n        File deletion1 = new File(templateCertificate);\r\n\r\n        deletion1.delete();\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean checkRenewal() throws Exception {\r\n        List<Certificate> certificateList = certificateRepository.findAll();\r\n\r\n        Date dateCurrent = new Date();\r\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n\r\n        List<Long> id = new ArrayList<>();\r\n        List<Date> expiry = new ArrayList<>();;\r\n\r\n        for (int i = 0; i < certificateList.size(); i++) {\r\n            id.add(certificateList.get(i).getOrgId());\r\n            expiry.add(format.parse(certificateList.get(i).getDateExpiry()));\r\n        }\r\n\r\n        for (int i = 0; i < id.size(); i++) {\r\n            if(expiry.get(i)==null)\r\n                throw new NullPointerException();\r\n\r\n            Date sqlDate = expiry.get(i);\r\n\r\n            boolean check = dateCurrent.after(sqlDate);\r\n            if (check) {\r\n                certificateRepository.updateOrgRenewal(id.get(i),false);\r\n                certificateRepository.updateAdminRenewal(id.get(i),false);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean CertificateExpiredEmail(String orgName, String orgEmail) throws Exception {\r\n        Mail mail = new Mail();\r\n\r\n        mail.setRecipient(orgEmail);\r\n        mail.setSubject(\"Givealot Certificate Expiried\");\r\n        mail.setMessage(\"Good day we hope this email finds you well,\\n We regret to inform you that your certificate has expired please log in to your portal to renew it\" +\r\n                \"\\n Kind Regards\\n\" +\r\n                \"Givalot Team\");\r\n\r\n        service.sendMail(mail);\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean organisationRenewal(long orgId) throws Exception {\r\n        certificateRepository.updateOrgRenewal(orgId,true);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean adminRenewal(long orgId) throws Exception {\r\n        certificateRepository.updateAdminRenewal(orgId,true);\r\n        return true;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java b/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java
--- a/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java	(date 1629135502378)
@@ -10,6 +10,7 @@
 import com.GiveaLot.givealot.Organisation.model.Organisations;
 import com.GiveaLot.givealot.Organisation.repository.OrganisationRepository;
 import com.GiveaLot.givealot.Server.ServerAccess;
+import com.jcraft.jsch.JSch;
 import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
 import org.apache.pdfbox.pdmodel.PDDocumentCatalog;
@@ -101,14 +102,14 @@
 
     @Override
     public File retrieveCertificate(long orgId, String orgName) throws Exception {
-        ServerAccess access = new ServerAccess();
+        ServerAccess access = new ServerAccess(new JSch());
 
         return access.downloadCertificate(orgId,orgName);
     }
 
     @Override
     public boolean createPDFDocument(Certificate cert, Organisations organisation, int points) throws Exception {
-        ServerAccess access = new ServerAccess();
+        ServerAccess access = new ServerAccess(new JSch());
 
         access.downloadCertificateTemplate(points);
 
Index: backend/givealot.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"web\" name=\"Web\">\r\n      <configuration>\r\n        <webroots />\r\n        <sourceRoots>\r\n          <root url=\"file://$MODULE_DIR$/src/main/java\" />\r\n          <root url=\"file://$MODULE_DIR$/src/main/resources\" />\r\n        </sourceRoots>\r\n      </configuration>\r\n    </facet>\r\n    <facet type=\"Spring\" name=\"Spring\">\r\n      <configuration />\r\n    </facet>\r\n    <facet type=\"jpa\" name=\"JPA\">\r\n      <configuration>\r\n        <setting name=\"validation-enabled\" value=\"true\" />\r\n        <setting name=\"provider-name\" value=\"Hibernate\" />\r\n        <datasource-mapping>\r\n          <factory-entry name=\"entityManagerFactory\" value=\"2b224217-3c19-46dc-adaf-74f6d398e7a8\" />\r\n          <factory-entry name=\"givealot\" />\r\n        </datasource-mapping>\r\n        <naming-strategy-map />\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_1_9\">\r\n    <output url=\"file://$MODULE_DIR$/target/classes\" />\r\n    <output-test url=\"file://$MODULE_DIR$/target/test-classes\" />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/resources\" type=\"java-resource\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/resources\" type=\"java-test-resource\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/${project.build.directory}/classes\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/${project.build.directory}/test-classes\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"library\" name=\"com.zaxxer:HikariCP:4.0.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-web:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-logging:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: ch.qos.logback:logback-classic:1.2.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: ch.qos.logback:logback-core:1.2.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.logging.log4j:log4j-to-slf4j:2.14.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.logging.log4j:log4j-api:2.14.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.slf4j:jul-to-slf4j:1.7.30\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.annotation:jakarta.annotation-api:1.3.5\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.yaml:snakeyaml:1.28\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-json:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.12.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.module:jackson-module-parameter-names:2.12.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-tomcat:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-core:9.0.46\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-el:9.0.46\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat.embed:tomcat-embed-websocket:9.0.46\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-web:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-webmvc:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-expression:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.commons:commons-lang3:3.12.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework.boot:spring-boot-starter-test:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework.boot:spring-boot-test:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework.boot:spring-boot-test-autoconfigure:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: com.jayway.jsonpath:json-path:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: net.minidev:json-smart:2.4.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: net.minidev:accessors-smart:2.4.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.xml.bind:jakarta.xml.bind-api:2.3.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.activation:jakarta.activation-api:1.2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.assertj:assertj-core:3.19.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.hamcrest:hamcrest:2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.jupiter:junit-jupiter:5.7.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.junit.jupiter:junit-jupiter-api:5.7.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.opentest4j:opentest4j:1.2.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.junit.platform:junit-platform-commons:1.7.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.jupiter:junit-jupiter-params:5.7.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.mockito:mockito-core:3.9.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: net.bytebuddy:byte-buddy:1.10.22\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: net.bytebuddy:byte-buddy-agent:1.10.22\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.objenesis:objenesis:3.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.mockito:mockito-junit-jupiter:3.9.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.skyscreamer:jsonassert:1.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: com.vaadin.external.google:android-json:0.0.20131108.vaadin1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-core:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-jcl:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.springframework:spring-test:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.xmlunit:xmlunit-core:2.8.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-security:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-aop:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.security:spring-security-config:5.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.security:spring-security-core:5.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.security:spring-security-web:5.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-mail:2.4.4\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.sun.mail:jakarta.mail:1.6.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.sun.activation:jakarta.activation:1.2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.springframework.boot:spring-boot-devtools:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-autoconfigure:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-context-support:5.3.9\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-beans:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-context:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.jsonwebtoken:jjwt:0.9.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.core:jackson-databind:2.12.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.core:jackson-annotations:2.12.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml.jackson.core:jackson-core:2.12.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.data:spring-data-jpa:2.5.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.data:spring-data-commons:2.5.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-orm:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-tx:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.aspectj:aspectjrt:1.9.6\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.slf4j:slf4j-api:1.7.30\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.itextpdf:itextpdf:5.5.13.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.code.gson:gson:2.8.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.integration:spring-integration-sftp:5.5.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.integration:spring-integration-file:5.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: commons-io:commons-io:2.8.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.tomcat:tomcat-util:7.0.22\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.jcraft:jsch:0.1.55\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-messaging:5.3.9\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.integration:spring-integration-core:5.5.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.retry:spring-retry:1.3.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: javax.annotation:javax.annotation-api:1.3.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.projectreactor:reactor-core:3.4.6\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.reactivestreams:reactive-streams:1.0.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.postgresql:postgresql:42.2.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.checkerframework:checker-qual:3.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.zaxxer:HikariCP:4.0.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-jdbc:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-jdbc:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.hierynomus:sshj:0.27.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.bouncycastle:bcprov-jdk15on:1.60\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.bouncycastle:bcpkix-jdk15on:1.60\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.jcraft:jzlib:1.1.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: net.i2p.crypto:eddsa:0.2.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: junit:junit:4.13.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.hamcrest:hamcrest-core:2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.projectlombok:lombok:1.18.20\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-data-jpa:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework.boot:spring-boot-starter-aop:2.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.aspectj:aspectjweaver:1.9.6\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.transaction:jakarta.transaction-api:1.3.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.persistence:jakarta.persistence-api:2.2.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.hibernate:hibernate-core:5.4.31.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jboss.logging:jboss-logging:3.4.1.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.javassist:javassist:3.27.0-GA\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: antlr:antlr:2.7.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jboss:jandex:2.2.3.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml:classmate:1.5.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.dom4j:dom4j:2.1.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.hibernate.common:hibernate-commons-annotations:5.1.2.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.glassfish.jaxb:jaxb-runtime:2.3.4\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.glassfish.jaxb:txw2:2.3.4\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.sun.istack:istack-commons-runtime:3.0.12\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.springframework:spring-aspects:5.3.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.pdfbox:pdfbox:3.0.0-RC1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: commons-logging:commons-logging:1.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.pdfbox:fontbox:2.0.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.pdfbox:jempbox:1.8.11\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.pdfbox:xmpbox:2.0.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.pdfbox:pdfbox-tools:2.0.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.pdfbox:pdfbox-app:3.0.0-RC1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.pdfbox:pdfbox-debugger:3.0.0-RC1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: info.picocli:picocli:4.6.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.apache.pdfbox:preflight:2.0.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.web3j:core:4.8.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.github.jnr:jnr-unixsocket:0.21\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.github.jnr:jnr-ffi:2.1.9\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.github.jnr:jffi:1.2.17\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: com.github.jnr:jffi:native:1.2.16\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.ow2.asm:asm:5.0.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.ow2.asm:asm-commons:5.0.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.ow2.asm:asm-analysis:5.0.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.ow2.asm:asm-tree:5.0.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.ow2.asm:asm-util:5.0.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.github.jnr:jnr-a64asm:1.0.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.github.jnr:jnr-x86asm:1.0.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.github.jnr:jnr-constants:0.9.11\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.github.jnr:jnr-enxio:0.19\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.github.jnr:jnr-posix:3.0.47\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: io.reactivex.rxjava2:rxjava:2.2.21\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.java-websocket:Java-WebSocket:1.3.8\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.web3j:crypto:4.8.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.web3j:rlp:4.8.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.web3j:tuples:4.8.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.web3j:utils:4.8.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.web3j:abi:4.8.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.web3j:codegen:4.8.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.squareup:kotlinpoet:1.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.jetbrains.kotlin:kotlin-reflect:1.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.squareup:javapoet:1.7.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.junit.platform:junit-platform-launcher:1.7.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.apiguardian:apiguardian-api:1.1.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.junit.platform:junit-platform-engine:1.7.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.junit.jupiter:junit-jupiter-engine:5.7.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"RUNTIME\" name=\"Maven: org.junit.vintage:junit-vintage-engine:5.7.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.squareup.okhttp3:okhttp:4.3.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.squareup.okio:okio:2.4.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jetbrains.kotlin:kotlin-stdlib-common:1.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jetbrains.kotlin:kotlin-stdlib:1.5.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jetbrains:annotations:13.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.squareup.okhttp3:logging-interceptor:4.3.1\" level=\"project\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/givealot.iml b/backend/givealot.iml
--- a/backend/givealot.iml	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/givealot.iml	(date 1629150007578)
@@ -77,10 +77,6 @@
     <orderEntry type="library" scope="RUNTIME" name="Maven: org.opentest4j:opentest4j:1.2.0" level="project" />
     <orderEntry type="library" scope="RUNTIME" name="Maven: org.junit.platform:junit-platform-commons:1.7.2" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-params:5.7.2" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.mockito:mockito-core:3.9.0" level="project" />
-    <orderEntry type="library" name="Maven: net.bytebuddy:byte-buddy:1.10.22" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: net.bytebuddy:byte-buddy-agent:1.10.22" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.objenesis:objenesis:3.2" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.mockito:mockito-junit-jupiter:3.9.0" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.skyscreamer:jsonassert:1.5.0" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: com.vaadin.external.google:android-json:0.0.20131108.vaadin1" level="project" />
@@ -204,5 +200,9 @@
     <orderEntry type="library" name="Maven: org.jetbrains.kotlin:kotlin-stdlib:1.5.0" level="project" />
     <orderEntry type="library" name="Maven: org.jetbrains:annotations:13.0" level="project" />
     <orderEntry type="library" name="Maven: com.squareup.okhttp3:logging-interceptor:4.3.1" level="project" />
+    <orderEntry type="library" name="Maven: org.mockito:mockito-core:2.21.0" level="project" />
+    <orderEntry type="library" name="Maven: net.bytebuddy:byte-buddy:1.10.22" level="project" />
+    <orderEntry type="library" name="Maven: net.bytebuddy:byte-buddy-agent:1.10.22" level="project" />
+    <orderEntry type="library" name="Maven: org.objenesis:objenesis:2.6" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: backend/src/test/java/com/GiveaLot/givealot/Organisation/repository/OrganisationRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/test/java/com/GiveaLot/givealot/Organisation/repository/OrganisationRepositoryTest.java b/backend/src/main/java/com/GiveaLot/givealot/TEMP/OrganisationRepositoryTest.java
rename from backend/src/test/java/com/GiveaLot/givealot/Organisation/repository/OrganisationRepositoryTest.java
rename to backend/src/main/java/com/GiveaLot/givealot/TEMP/OrganisationRepositoryTest.java
--- a/backend/src/test/java/com/GiveaLot/givealot/Organisation/repository/OrganisationRepositoryTest.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/src/main/java/com/GiveaLot/givealot/TEMP/OrganisationRepositoryTest.java	(date 1629131912993)
@@ -1,68 +1,70 @@
-package com.GiveaLot.givealot.Organisation.repository;
-
-import com.GiveaLot.givealot.Organisation.model.Organisations;
-import com.GiveaLot.givealot.Organisation.model.OrganisationInfo;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-import java.time.LocalDate;
-
-@SpringBootTest
-class OrganisationRepositoryTest {
-
-    @Autowired
-    private OrganisationRepository repository;
-
-    @Autowired
-    private OrganisationInfoRepository OrganisationInfoRepository;
-
-    @Test
-    public void selectOrgTest()
-    {
-        Organisations res = repository.selectOrganisationById(10L);
-        System.out.println(res);
-    }
-
-    @Test
-    public void registerOrganisationTest()
-    {
-        Organisations org = Organisations.builder()
-                .orgDescription("register test description")
-                .orgEmail("hello@gmail.com")
-                .orgSector("my sector")
-                .contactPerson("Norman")
-                .directory("some dir")
-                .slogan("slogan register")
-                .status("active")
-                .contactNumber("0889343234")
-                .password("somestrongpassword")
-                .orgName("my AddOrganisationRequest")
-                .build();
-
-        System.out.println(repository.save(org));
-        OrganisationInfo organisationInfo = new OrganisationInfo();
-        LocalDate date = LocalDate.now();
-        //organisationInfo.setEstablishmentDate(date.toString());
-        OrganisationInfoRepository.save(organisationInfo);
-    }
-
-    @Test
-    public void changeStatus()
-    {
-        try {
-            System.out.println("change status test");
-            System.out.println(repository.updateStatus(10L, "suspended".toLowerCase()));
-        }
-        catch (Exception e)
-        {
-            System.out.println(e);
-        }
-    }
-
-    @Test
-    void getOrgId()
-    {
-        System.out.println("getting org ID");
-        System.out.println(repository.getOrgId("orgEmail@gmail.com"));
-    }
-}
\ No newline at end of file
+//package com.GiveaLot.givealot.TEMP;
+//
+//import com.GiveaLot.givealot.Organisation.model.Organisations;
+//import com.GiveaLot.givealot.Organisation.model.OrganisationInfo;
+//import com.GiveaLot.givealot.Organisation.repository.OrganisationInfoRepository;
+//import com.GiveaLot.givealot.Organisation.repository.OrganisationRepository;
+//import org.junit.jupiter.api.Test;
+//import org.springframework.beans.factory.annotation.Autowired;
+//import org.springframework.boot.test.context.SpringBootTest;
+//import java.time.LocalDate;
+//
+//@SpringBootTest
+//class OrganisationRepositoryTest {
+//
+//    @Autowired
+//    private OrganisationRepository repository;
+//
+//    @Autowired
+//    private com.GiveaLot.givealot.Organisation.repository.OrganisationInfoRepository OrganisationInfoRepository;
+//
+//    @Test
+//    public void selectOrgTest()
+//    {
+//        Organisations res = repository.selectOrganisationById(10L);
+//        System.out.println(res);
+//    }
+//
+//    @Test
+//    public void registerOrganisationTest()
+//    {
+//        Organisations org = Organisations.builder()
+//                .orgDescription("register test description")
+//                .orgEmail("hello@gmail.com")
+//                .orgSector("my sector")
+//                .contactPerson("Norman")
+//                .directory("some dir")
+//                .slogan("slogan register")
+//                .status("active")
+//                .contactNumber("0889343234")
+//                .password("somestrongpassword")
+//                .orgName("my AddOrganisationRequest")
+//                .build();
+//
+//        System.out.println(repository.save(org));
+//        OrganisationInfo organisationInfo = new OrganisationInfo();
+//        LocalDate date = LocalDate.now();
+//        //organisationInfo.setEstablishmentDate(date.toString());
+//        OrganisationInfoRepository.save(organisationInfo);
+//    }
+//
+//    @Test
+//    public void changeStatus()
+//    {
+//        try {
+//            System.out.println("change status test");
+//            System.out.println(repository.updateStatus(10L, "suspended".toLowerCase()));
+//        }
+//        catch (Exception e)
+//        {
+//            System.out.println(e);
+//        }
+//    }
+//
+//    @Test
+//    void getOrgId()
+//    {
+//        System.out.println("getting org ID");
+//        System.out.println(repository.getOrgId("orgEmail@gmail.com"));
+//    }
+//}
\ No newline at end of file
Index: backend/src/test/java/com/GiveaLot/givealot/Organisation/service/OrganisationServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/test/java/com/GiveaLot/givealot/Organisation/service/OrganisationServiceTest.java b/backend/src/main/java/com/GiveaLot/givealot/TEMP/OrganisationServiceTest.java
rename from backend/src/test/java/com/GiveaLot/givealot/Organisation/service/OrganisationServiceTest.java
rename to backend/src/main/java/com/GiveaLot/givealot/TEMP/OrganisationServiceTest.java
--- a/backend/src/test/java/com/GiveaLot/givealot/Organisation/service/OrganisationServiceTest.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/src/main/java/com/GiveaLot/givealot/TEMP/OrganisationServiceTest.java	(date 1629131859797)
@@ -1,4 +1,4 @@
-/*
+ /*
 package com.GiveaLot.givealot.AddOrganisationRequest.service;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
Index: backend/src/main/java/com/GiveaLot/givealot/Report/requests/createReportRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.GiveaLot.givealot.Report.requests;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\n\r\nimport java.sql.Timestamp;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\npublic class createReportRequest {\r\n    String orgId;\r\n    String reportDescription;\r\n    String reportType;\r\n    String reporterEmail;\r\n\r\n\r\n    public createReportRequest(@JsonProperty(\"orgId\") String orgId,\r\n                               @JsonProperty(\"description\") String reportDescription,\r\n                               @JsonProperty(\"type\") String reportType,\r\n                               @JsonProperty(\"email\") String reporterEmail)\r\n    {\r\n        this.orgId = orgId;\r\n        this.reportDescription = reportDescription;\r\n        this.reportType = reportType;\r\n        this.reporterEmail = reporterEmail;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /** Getters **/\r\n\r\n    public String getOrgId() {\r\n        return orgId;\r\n    }\r\n\r\n    public String getReportDescription(){\r\n        return reportDescription;\r\n    }\r\n\r\n    public String getReportType() {\r\n        return reportType;\r\n    }\r\n\r\n    public String getReporterEmail() {\r\n        return reporterEmail;\r\n    }\r\n\r\n\r\n\r\n\r\n    /** Setters **/\r\n\r\n    public void setOrgId(String orgId) {\r\n        this.orgId = orgId;\r\n    }\r\n\r\n    public void setReportDescription(String reportDescription) {\r\n        this.reportDescription = reportDescription;\r\n    }\r\n\r\n    public void setReportType(String reportType) {\r\n        this.reportType = reportType;\r\n    }\r\n\r\n    public void setReporterEmail(String reporterEmail) {\r\n        this.reporterEmail = reporterEmail;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Report/requests/createReportRequest.java b/backend/src/main/java/com/GiveaLot/givealot/Report/requests/createReportRequest.java
--- a/backend/src/main/java/com/GiveaLot/givealot/Report/requests/createReportRequest.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/src/main/java/com/GiveaLot/givealot/Report/requests/createReportRequest.java	(date 1629131143150)
@@ -7,17 +7,20 @@
 
 public class createReportRequest {
     String orgId;
+    String orgName;
     String reportDescription;
     String reportType;
     String reporterEmail;
 
 
     public createReportRequest(@JsonProperty("orgId") String orgId,
+                               @JsonProperty("orgName") String orgName,
                                @JsonProperty("description") String reportDescription,
                                @JsonProperty("type") String reportType,
                                @JsonProperty("email") String reporterEmail)
     {
         this.orgId = orgId;
+        this.orgName = orgName;
         this.reportDescription = reportDescription;
         this.reportType = reportType;
         this.reporterEmail = reporterEmail;
@@ -27,12 +30,17 @@
 
 
 
+
     /** Getters **/
 
     public String getOrgId() {
         return orgId;
     }
 
+    public String getOrgName() {
+        return orgName;
+    }
+
     public String getReportDescription(){
         return reportDescription;
     }
@@ -54,6 +62,10 @@
         this.orgId = orgId;
     }
 
+    public void setOrgName(String orgName) {
+        this.orgName = orgName;
+    }
+
     public void setReportDescription(String reportDescription) {
         this.reportDescription = reportDescription;
     }
Index: backend/src/main/java/com/GiveaLot/givealot/Report/service/ReportService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.GiveaLot.givealot.Report.service;\r\n\r\nimport com.GiveaLot.givealot.Report.dataclass.Report;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.io.File;\r\n\r\n@Service\r\npublic interface ReportService {\r\n    public boolean createReportFile(Report report) throws Exception;\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Report/service/ReportService.java b/backend/src/main/java/com/GiveaLot/givealot/Report/service/ReportService.java
--- a/backend/src/main/java/com/GiveaLot/givealot/Report/service/ReportService.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/src/main/java/com/GiveaLot/givealot/Report/service/ReportService.java	(date 1629131242078)
@@ -9,5 +9,4 @@
 public interface ReportService {
     public boolean createReportFile(Report report) throws Exception;
 
-
 }
Index: backend/src/test/java/com/GiveaLot/givealot/Organisation/repository/OrganisationInfoRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/test/java/com/GiveaLot/givealot/Organisation/repository/OrganisationInfoRepositoryTest.java b/backend/src/main/java/com/GiveaLot/givealot/TEMP/OrganisationInfoRepositoryTest.java
rename from backend/src/test/java/com/GiveaLot/givealot/Organisation/repository/OrganisationInfoRepositoryTest.java
rename to backend/src/main/java/com/GiveaLot/givealot/TEMP/OrganisationInfoRepositoryTest.java
--- a/backend/src/test/java/com/GiveaLot/givealot/Organisation/repository/OrganisationInfoRepositoryTest.java	(revision dcc1987d3a088c8b529289a35b322a505fcd2c67)
+++ b/backend/src/main/java/com/GiveaLot/givealot/TEMP/OrganisationInfoRepositoryTest.java	(date 1629131912990)
@@ -1,67 +1,68 @@
-package com.GiveaLot.givealot.Organisation.repository;
-
-import com.GiveaLot.givealot.Organisation.model.OrganisationInfo;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-
-@SpringBootTest
-class OrganisationInfoRepositoryTest {
-
-    @Autowired
-    OrganisationInfoRepository repository;
-
-    @Test
-    void selectOrganisationInfo() {
-        OrganisationInfo organisationInfo = repository.selectOrganisationInfo(10L);
-        System.out.println(organisationInfo);
-    }
-
-    @Test
-    void addOrgWebsite() {
-        Integer res = repository.addOrgWebsite(10L, "www.test.org");
-        System.out.println(res);
-    }
-
-    @Test
-    void removeOrgWebsite() {
-        Integer res = repository.removeOrgWebsite(10L);
-        System.out.println(res);
-    }
-
-    @Test
-    void addOrgAddress() {
-        Integer res = repository.addOrgAddress(10L, "82 givealot str, pretoria, 1801, SA");
-        System.out.println(res);
-    }
-
-    @Test
-    void removeOrgAddress() {
-        Integer res = repository.removeOrgAddress(10L);
-        System.out.println(res);
-    }
-
-    @Test
-    void addTwitter() {
-    }
-
-    @Test
-    void addInstagram() {
-    }
-
-    @Test
-    void addFacebook() {
-    }
-
-    @Test
-    void removeTwitter() {
-    }
-
-    @Test
-    void removeInstagram() {
-    }
-
-    @Test
-    void removeFacebook() {
-    }
-}
\ No newline at end of file
+//package com.GiveaLot.givealot.TEMP;
+//
+//import com.GiveaLot.givealot.Organisation.model.OrganisationInfo;
+//import com.GiveaLot.givealot.Organisation.repository.OrganisationInfoRepository;
+//import org.junit.jupiter.api.Test;
+//import org.springframework.beans.factory.annotation.Autowired;
+//import org.springframework.boot.test.context.SpringBootTest;
+//
+//@SpringBootTest
+//class OrganisationInfoRepositoryTest {
+//
+//    @Autowired
+//    OrganisationInfoRepository repository;
+//
+//    @Test
+//    void selectOrganisationInfo() {
+//        OrganisationInfo organisationInfo = repository.selectOrganisationInfo(10L);
+//        System.out.println(organisationInfo);
+//    }
+//
+//    @Test
+//    void addOrgWebsite() {
+//        Integer res = repository.addOrgWebsite(10L, "www.test.org");
+//        System.out.println(res);
+//    }
+//
+//    @Test
+//    void removeOrgWebsite() {
+//        Integer res = repository.removeOrgWebsite(10L);
+//        System.out.println(res);
+//    }
+//
+//    @Test
+//    void addOrgAddress() {
+//        Integer res = repository.addOrgAddress(10L, "82 givealot str, pretoria, 1801, SA");
+//        System.out.println(res);
+//    }
+//
+//    @Test
+//    void removeOrgAddress() {
+//        Integer res = repository.removeOrgAddress(10L);
+//        System.out.println(res);
+//    }
+//
+//    @Test
+//    void addTwitter() {
+//    }
+//
+//    @Test
+//    void addInstagram() {
+//    }
+//
+//    @Test
+//    void addFacebook() {
+//    }
+//
+//    @Test
+//    void removeTwitter() {
+//    }
+//
+//    @Test
+//    void removeInstagram() {
+//    }
+//
+//    @Test
+//    void removeFacebook() {
+//    }
+//}
\ No newline at end of file
