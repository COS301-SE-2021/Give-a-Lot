Index: backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.GiveaLot.givealot.Certificate.service;\r\n\r\nimport com.GiveaLot.givealot.Blockchain.Repository.BlockChainRepository;\r\nimport com.GiveaLot.givealot.Blockchain.dataclass.Blockchain;\r\nimport com.GiveaLot.givealot.Blockchain.service.BlockchainService;\r\nimport com.GiveaLot.givealot.Blockchain.service.BlockchainServiceImpl;\r\nimport com.GiveaLot.givealot.Certificate.dataclass.Certificate;\r\nimport com.GiveaLot.givealot.Certificate.repository.CertificateRepository;\r\nimport com.GiveaLot.givealot.Organisation.dataclass.OrganisationRepo;\r\nimport com.GiveaLot.givealot.Organisation.model.OrganisationPoints;\r\nimport com.GiveaLot.givealot.Organisation.model.Organisation;\r\nimport com.GiveaLot.givealot.Organisation.model.Organisations;\r\nimport com.GiveaLot.givealot.Organisation.repository.OrganisationRepository;\r\nimport com.GiveaLot.givealot.Organisation.requests.AddOrganisationRequest;\r\nimport com.GiveaLot.givealot.Server.ServerAccess;\r\nimport org.apache.pdfbox.Loader;\r\nimport org.apache.pdfbox.pdmodel.PDDocument;\r\nimport org.apache.pdfbox.pdmodel.PDDocumentCatalog;\r\nimport org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\r\nimport org.apache.pdfbox.pdmodel.interactive.form.PDField;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\nimport javax.mail.internet.MimeMessage;\r\nimport java.io.File;\r\n\r\npublic class CertificateServiceImpl implements CertificateService {\r\n\r\n    private BlockchainService blockchainService;\r\n\r\n    @Autowired\r\n    private OrganisationRepository organisationRepository;\r\n\r\n    @Autowired\r\n    private CertificateRepository certificateRepository;\r\n\r\n    @Autowired\r\n    private BlockChainRepository blockChainRepository;\r\n\r\n\r\n\r\n//    @Autowired\r\n//    CertificateServiceImpl(  BlockchainService blockchainService, OrganisationRepository organisationRepository, CertificateRepository certificateRepository)\r\n//    {\r\n//        this.blockchainService = blockchainService;\r\n//        this.organisationRepository = organisationRepository;\r\n//        this.certificateRepository = certificateRepository;\r\n//    }\r\n\r\n    @Override\r\n    public boolean addCertificate(long orgId) throws Exception {\r\n\r\n        Certificate cert= certificateRepository.selectCertificateById(orgId);\r\n\r\n        Organisations organisation = organisationRepository.selectOrganisationById(orgId);\r\n\r\n       boolean certificateCreated = createPDFDocument(cert,organisation,0);\r\n\r\n        if(!certificateCreated){\r\n            throw new Exception(\"Exception: Problem creating and storing certificate\");\r\n        }\r\n\r\n        File certificate = retrieveCertificate(orgId, organisation.getOrgName());\r\n\r\n        String[] result = blockchainService\r\n                .uploadCertificate(orgId, certificate);\r\n        String certificateHash = result[0];\r\n        String txHash = result[1];\r\n        long index = blockchainService.findCertificateIndex(orgId);\r\n\r\n        Blockchain blockchain = new Blockchain(orgId,index,0,txHash,certificateHash);\r\n\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean updateCertificate(long orgId) throws Exception {\r\n\r\n        Blockchain blockchain = blockChainRepository.selectBlockchainOrgId(orgId);\r\n        Organisations organisation = organisationRepository.selectOrganisationById(orgId);\r\n        OrganisationPoints organisationPoints = organisationPointsRepository(orgId);\r\n        Certificate cert = certificateRepository.selectCertificateById(orgId);\r\n\r\n        boolean certificateCreated = createPDFDocument(cert,organisation,cert.getPoints());\r\n\r\n        if(!certificateCreated){\r\n            throw new Exception(\"Exception: Problem creating and storing certificate\");\r\n        }\r\n\r\n        File certificate = retrieveCertificate(orgId, organisation.getOrgName());\r\n\r\n        String[] result = blockchainService\r\n                .upgradeCertificate(blockchain.getIndex(),orgId, certificate,blockchain.getLevel());\r\n\r\n        String certificateHash = result[0];\r\n        String txHash = result[1];\r\n\r\n        blockChainRepository.UpdateBlockchain(blockchain.getIndex(),blockchain.getLevel()+1,txHash,certificateHash,orgId);\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public File retrieveCertificate(long orgId, String orgName) throws Exception {\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        return access.downloadCertificate(orgId,orgName);\r\n    }\r\n\r\n    @Override\r\n    public boolean createPDFDocument(Certificate cert, Organisations organisation, int points) throws Exception {\r\n        ServerAccess access = new ServerAccess();\r\n\r\n        access.downloadCertificateTemplate(points);\r\n\r\n        String templateCertificate = \"backend/src/main/resources/TempCertificate/CertificateTemplate.pdf\";\r\n        String completeCertificate = \"backend/src/main/resources/TempCertificate/CertificateComplete.pdf\";\r\n\r\n        /** Setup the pdf file **/\r\n\r\n\r\n        File template = new File(templateCertificate);\r\n\r\n        PDDocument document = Loader.loadPDF(template);\r\n        PDDocumentCatalog catalog = document.getDocumentCatalog();\r\n\r\n        PDAcroForm acroForm = catalog.getAcroForm();\r\n\r\n        /** Assign acroform fields **/\r\n\r\n\r\n        try {\r\n\r\n            if (acroForm != null) {\r\n\r\n                PDField field = (PDField) acroForm.getField(\"name\"); // Name\r\n                field.setValue(organisation.getOrgName().toUpperCase());\r\n\r\n                field = (PDField) acroForm.getField(\"slogan\"); // Slogan\r\n                field.setValue(organisation.getSlogan());\r\n\r\n\r\n                field = (PDField) acroForm.getField(\"created\"); // Date Created\r\n                field.setValue(cert.getDateCreated());\r\n\r\n                field = (PDField) acroForm.getField(\"expiry\"); // Date Expiry\r\n                field.setValue(cert.getDateExpiry());\r\n\r\n                acroForm.flatten();\r\n\r\n            }\r\n        }catch (Exception e){\r\n            throw new Exception(\"Exception: unable to create certificate\");\r\n        }\r\n\r\n        document.save(completeCertificate);\r\n        document.close();\r\n\r\n        access.uploadCertificate(organisation.getOrgId(), organisation.getOrgName());\r\n\r\n        File deletion1 = new File(templateCertificate);\r\n        File deletion2 = new File(completeCertificate);\r\n\r\n        deletion1.delete();\r\n        deletion2.delete();\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean checkRenewal() throws Exception {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean setupEmailServerProperties() {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean sendEmail() throws Exception {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public MimeMessage CertificateExpiredEmail(String orgName, String orgEmail) throws Exception {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean organisationRenewal(long orgId) throws Exception {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean adminRenewal(long orgId) throws Exception {\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java b/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java
--- a/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java	(revision 92a7fd9d637b4d270b2173490bb359c318328f59)
+++ b/backend/src/main/java/com/GiveaLot/givealot/Certificate/service/CertificateServiceImpl.java	(date 1629067611940)
@@ -3,15 +3,11 @@
 import com.GiveaLot.givealot.Blockchain.Repository.BlockChainRepository;
 import com.GiveaLot.givealot.Blockchain.dataclass.Blockchain;
 import com.GiveaLot.givealot.Blockchain.service.BlockchainService;
-import com.GiveaLot.givealot.Blockchain.service.BlockchainServiceImpl;
 import com.GiveaLot.givealot.Certificate.dataclass.Certificate;
 import com.GiveaLot.givealot.Certificate.repository.CertificateRepository;
-import com.GiveaLot.givealot.Organisation.dataclass.OrganisationRepo;
 import com.GiveaLot.givealot.Organisation.model.OrganisationPoints;
-import com.GiveaLot.givealot.Organisation.model.Organisation;
 import com.GiveaLot.givealot.Organisation.model.Organisations;
 import com.GiveaLot.givealot.Organisation.repository.OrganisationRepository;
-import com.GiveaLot.givealot.Organisation.requests.AddOrganisationRequest;
 import com.GiveaLot.givealot.Server.ServerAccess;
 import org.apache.pdfbox.Loader;
 import org.apache.pdfbox.pdmodel.PDDocument;
